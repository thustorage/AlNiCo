// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module doorbell_dataflow (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_hostm_d_AWVALID,
        m_axi_hostm_d_AWREADY,
        m_axi_hostm_d_AWADDR,
        m_axi_hostm_d_AWID,
        m_axi_hostm_d_AWLEN,
        m_axi_hostm_d_AWSIZE,
        m_axi_hostm_d_AWBURST,
        m_axi_hostm_d_AWLOCK,
        m_axi_hostm_d_AWCACHE,
        m_axi_hostm_d_AWPROT,
        m_axi_hostm_d_AWQOS,
        m_axi_hostm_d_AWREGION,
        m_axi_hostm_d_AWUSER,
        m_axi_hostm_d_WVALID,
        m_axi_hostm_d_WREADY,
        m_axi_hostm_d_WDATA,
        m_axi_hostm_d_WSTRB,
        m_axi_hostm_d_WLAST,
        m_axi_hostm_d_WID,
        m_axi_hostm_d_WUSER,
        m_axi_hostm_d_ARVALID,
        m_axi_hostm_d_ARREADY,
        m_axi_hostm_d_ARADDR,
        m_axi_hostm_d_ARID,
        m_axi_hostm_d_ARLEN,
        m_axi_hostm_d_ARSIZE,
        m_axi_hostm_d_ARBURST,
        m_axi_hostm_d_ARLOCK,
        m_axi_hostm_d_ARCACHE,
        m_axi_hostm_d_ARPROT,
        m_axi_hostm_d_ARQOS,
        m_axi_hostm_d_ARREGION,
        m_axi_hostm_d_ARUSER,
        m_axi_hostm_d_RVALID,
        m_axi_hostm_d_RREADY,
        m_axi_hostm_d_RDATA,
        m_axi_hostm_d_RLAST,
        m_axi_hostm_d_RID,
        m_axi_hostm_d_RUSER,
        m_axi_hostm_d_RRESP,
        m_axi_hostm_d_BVALID,
        m_axi_hostm_d_BREADY,
        m_axi_hostm_d_BRESP,
        m_axi_hostm_d_BID,
        m_axi_hostm_d_BUSER,
        compute_core_id_out_s_1_dout,
        compute_core_id_out_s_1_empty_n,
        compute_core_id_out_s_1_read,
        compute_core_id_out_1_0_dout,
        compute_core_id_out_1_0_empty_n,
        compute_core_id_out_1_0_read,
        queue_metadata_address0,
        queue_metadata_ce0,
        queue_metadata_we0,
        queue_metadata_d0,
        queue_metadata_q0,
        MESS_NUM,
        queue_addr_map_address0,
        queue_addr_map_ce0,
        queue_addr_map_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd2;
parameter    ap_ST_fsm_pp0_stage1 = 2'd0;
parameter    ap_ST_fsm_pp0_stage2 = 2'd1;
parameter    ap_ST_fsm_pp0_stage3 = 2'd3;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_hostm_d_AWVALID;
input   m_axi_hostm_d_AWREADY;
output  [31:0] m_axi_hostm_d_AWADDR;
output  [0:0] m_axi_hostm_d_AWID;
output  [31:0] m_axi_hostm_d_AWLEN;
output  [2:0] m_axi_hostm_d_AWSIZE;
output  [1:0] m_axi_hostm_d_AWBURST;
output  [1:0] m_axi_hostm_d_AWLOCK;
output  [3:0] m_axi_hostm_d_AWCACHE;
output  [2:0] m_axi_hostm_d_AWPROT;
output  [3:0] m_axi_hostm_d_AWQOS;
output  [3:0] m_axi_hostm_d_AWREGION;
output  [0:0] m_axi_hostm_d_AWUSER;
output   m_axi_hostm_d_WVALID;
input   m_axi_hostm_d_WREADY;
output  [31:0] m_axi_hostm_d_WDATA;
output  [3:0] m_axi_hostm_d_WSTRB;
output   m_axi_hostm_d_WLAST;
output  [0:0] m_axi_hostm_d_WID;
output  [0:0] m_axi_hostm_d_WUSER;
output   m_axi_hostm_d_ARVALID;
input   m_axi_hostm_d_ARREADY;
output  [31:0] m_axi_hostm_d_ARADDR;
output  [0:0] m_axi_hostm_d_ARID;
output  [31:0] m_axi_hostm_d_ARLEN;
output  [2:0] m_axi_hostm_d_ARSIZE;
output  [1:0] m_axi_hostm_d_ARBURST;
output  [1:0] m_axi_hostm_d_ARLOCK;
output  [3:0] m_axi_hostm_d_ARCACHE;
output  [2:0] m_axi_hostm_d_ARPROT;
output  [3:0] m_axi_hostm_d_ARQOS;
output  [3:0] m_axi_hostm_d_ARREGION;
output  [0:0] m_axi_hostm_d_ARUSER;
input   m_axi_hostm_d_RVALID;
output   m_axi_hostm_d_RREADY;
input  [31:0] m_axi_hostm_d_RDATA;
input   m_axi_hostm_d_RLAST;
input  [0:0] m_axi_hostm_d_RID;
input  [0:0] m_axi_hostm_d_RUSER;
input  [1:0] m_axi_hostm_d_RRESP;
input   m_axi_hostm_d_BVALID;
output   m_axi_hostm_d_BREADY;
input  [1:0] m_axi_hostm_d_BRESP;
input  [0:0] m_axi_hostm_d_BID;
input  [0:0] m_axi_hostm_d_BUSER;
input  [31:0] compute_core_id_out_s_1_dout;
input   compute_core_id_out_s_1_empty_n;
output   compute_core_id_out_s_1_read;
input  [31:0] compute_core_id_out_1_0_dout;
input   compute_core_id_out_1_0_empty_n;
output   compute_core_id_out_1_0_read;
output  [6:0] queue_metadata_address0;
output   queue_metadata_ce0;
output   queue_metadata_we0;
output  [31:0] queue_metadata_d0;
input  [31:0] queue_metadata_q0;
input  [31:0] MESS_NUM;
output  [4:0] queue_addr_map_address0;
output   queue_addr_map_ce0;
input  [30:0] queue_addr_map_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_hostm_d_AWVALID;
reg m_axi_hostm_d_WVALID;
reg m_axi_hostm_d_BREADY;
reg[6:0] queue_metadata_address0;
reg queue_metadata_ce0;
reg queue_metadata_we0;
reg[31:0] queue_metadata_d0;
reg queue_addr_map_ce0;

reg    ap_done_reg;
reg   [1:0] ap_CS_fsm;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_sig_ioackin_m_axi_hostm_d_AWREADY;
reg   [0:0] tmp_reg_198;
reg    ap_block_state4_io;
wire    ap_block_state8_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg    hostm_d_blk_n_AW;
wire    ap_block_pp0_stage3;
reg    hostm_d_blk_n_W;
wire    ap_block_pp0_stage0;
reg    hostm_d_blk_n_B;
wire    ap_block_pp0_stage1;
reg   [0:0] tmp_reg_198_pp0_iter2_reg;
reg    compute_core_id_out_s_1_blk_n;
reg    compute_core_id_out_1_0_blk_n;
wire   [0:0] tmp_nbreadreq_fu_64_p4;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_sig_ioackin_m_axi_hostm_d_WREADY;
reg    ap_block_state5_io;
wire    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_198_pp0_iter1_reg;
reg   [31:0] tmp_i_reg_202;
wire    compute_core_id_out_s_10_status;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state10_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg   [6:0] queue_metadata_addr_reg_207;
reg   [31:0] local_head_reg_217;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] queue_offset_fu_161_p2;
reg   [31:0] queue_offset_reg_223;
wire   [0:0] tmp_62_i_fu_183_p2;
reg   [0:0] tmp_62_i_reg_228;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage1_subdone;
wire  signed [63:0] tmp_105_fu_146_p1;
wire  signed [63:0] tmp_i_62_fu_133_p1;
wire  signed [63:0] tmp_64_i_fu_188_p1;
reg    ap_reg_ioackin_m_axi_hostm_d_AWREADY;
wire    ap_block_pp0_stage3_01001;
reg    ap_reg_ioackin_m_axi_hostm_d_WREADY;
reg    ap_block_pp0_stage0_01001;
reg    compute_core_id_out_s_10_update;
wire   [31:0] tmp_60_i_fu_167_p2;
wire  signed [31:0] tmp_i_62_fu_133_p0;
wire  signed [31:0] tmp_s_fu_138_p1;
wire   [33:0] tmp_s_fu_138_p3;
wire    ap_block_pp0_stage2;
wire   [31:0] tmp_924_fu_155_p2;
wire  signed [31:0] extLd_i_fu_151_p1;
wire   [31:0] tmp_61_i_fu_177_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
reg    ap_condition_363;
reg    ap_condition_368;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd2;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 tmp_reg_198 = 1'd0;
#0 tmp_reg_198_pp0_iter2_reg = 1'd0;
#0 tmp_reg_198_pp0_iter1_reg = 1'd0;
#0 tmp_i_reg_202 = 32'd0;
#0 queue_metadata_addr_reg_207 = 7'd0;
#0 local_head_reg_217 = 32'd0;
#0 queue_offset_reg_223 = 32'd0;
#0 tmp_62_i_reg_228 = 1'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_reg_ioackin_m_axi_hostm_d_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_hostm_d_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_hostm_d_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_363)) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_m_axi_hostm_d_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (m_axi_hostm_d_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_hostm_d_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_hostm_d_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_368)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_hostm_d_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_hostm_d_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_hostm_d_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        local_head_reg_217 <= 32'd0;
    end else begin
        if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage2 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            local_head_reg_217 <= queue_metadata_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                queue_metadata_addr_reg_207[2] <= 1'b0;
        queue_metadata_addr_reg_207[3] <= 1'b0;
        queue_metadata_addr_reg_207[4] <= 1'b0;
        queue_metadata_addr_reg_207[5] <= 1'b0;
        queue_metadata_addr_reg_207[6] <= 1'b0;
    end else begin
        if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage1_11001))) begin
                        queue_metadata_addr_reg_207[6 : 2] <= tmp_105_fu_146_p1[6 : 2];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        queue_offset_reg_223 <= 32'd0;
    end else begin
        if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage2 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage2_11001))) begin
            queue_offset_reg_223 <= queue_offset_fu_161_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_62_i_reg_228 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage3 == ap_CS_fsm))) begin
            tmp_62_i_reg_228 <= tmp_62_i_fu_183_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_i_reg_202 <= 32'd0;
    end else begin
        if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            tmp_i_reg_202 <= compute_core_id_out_s_1_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_reg_198 <= 1'd0;
    end else begin
        if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            tmp_reg_198 <= tmp_nbreadreq_fu_64_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_reg_198_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            tmp_reg_198_pp0_iter1_reg <= tmp_reg_198;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_reg_198_pp0_iter2_reg <= 1'd0;
    end else begin
        if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            tmp_reg_198_pp0_iter2_reg <= tmp_reg_198_pp0_iter1_reg;
        end
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (ap_start == 1'b0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_hostm_d_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_hostm_d_AWREADY = m_axi_hostm_d_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_hostm_d_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_hostm_d_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_hostm_d_WREADY = m_axi_hostm_d_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_hostm_d_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        compute_core_id_out_1_0_blk_n = compute_core_id_out_1_0_empty_n;
    end else begin
        compute_core_id_out_1_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        compute_core_id_out_s_10_update = 1'b1;
    end else begin
        compute_core_id_out_s_10_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        compute_core_id_out_s_1_blk_n = compute_core_id_out_s_1_empty_n;
    end else begin
        compute_core_id_out_s_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        hostm_d_blk_n_AW = m_axi_hostm_d_AWREADY;
    end else begin
        hostm_d_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_198_pp0_iter2_reg == 1'd1) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        hostm_d_blk_n_B = m_axi_hostm_d_BVALID;
    end else begin
        hostm_d_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        hostm_d_blk_n_W = m_axi_hostm_d_WREADY;
    end else begin
        hostm_d_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (ap_reg_ioackin_m_axi_hostm_d_AWREADY == 1'b0) & (1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        m_axi_hostm_d_AWVALID = 1'b1;
    end else begin
        m_axi_hostm_d_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_198_pp0_iter2_reg == 1'd1) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_hostm_d_BREADY = 1'b1;
    end else begin
        m_axi_hostm_d_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (ap_reg_ioackin_m_axi_hostm_d_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_hostm_d_WVALID = 1'b1;
    end else begin
        m_axi_hostm_d_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        queue_addr_map_ce0 = 1'b1;
    end else begin
        queue_addr_map_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        queue_metadata_address0 = queue_metadata_addr_reg_207;
    end else if (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        queue_metadata_address0 = tmp_105_fu_146_p1;
    end else begin
        queue_metadata_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        queue_metadata_ce0 = 1'b1;
    end else begin
        queue_metadata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        queue_metadata_d0 = 32'd0;
    end else if (((ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        queue_metadata_d0 = tmp_60_i_fu_167_p2;
    end else begin
        queue_metadata_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_62_i_reg_228 == 1'd1) & (tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        queue_metadata_we0 = 1'b1;
    end else begin
        queue_metadata_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((tmp_reg_198 == 1'd1) & (compute_core_id_out_s_10_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_reg_198_pp0_iter2_reg == 1'd1) & (m_axi_hostm_d_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((tmp_reg_198 == 1'd1) & (compute_core_id_out_s_10_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_reg_198_pp0_iter2_reg == 1'd1) & (m_axi_hostm_d_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (ap_done_reg == 1'b1);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter2 = ((tmp_reg_198_pp0_iter2_reg == 1'd1) & (m_axi_hostm_d_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((tmp_reg_198 == 1'd1) & (compute_core_id_out_s_10_status == 1'b0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((tmp_reg_198 == 1'd1) & (ap_sig_ioackin_m_axi_hostm_d_AWREADY == 1'b0));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((tmp_reg_198 == 1'd1) & (ap_sig_ioackin_m_axi_hostm_d_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_363 = ((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_368 = ((tmp_reg_198 == 1'd1) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign compute_core_id_out_1_0_read = compute_core_id_out_s_10_update;

assign compute_core_id_out_s_10_status = (compute_core_id_out_s_1_empty_n & compute_core_id_out_1_0_empty_n);

assign compute_core_id_out_s_1_read = compute_core_id_out_s_10_update;

assign extLd_i_fu_151_p1 = $signed(queue_addr_map_q0);

assign m_axi_hostm_d_ARADDR = 32'd0;

assign m_axi_hostm_d_ARBURST = 2'd0;

assign m_axi_hostm_d_ARCACHE = 4'd0;

assign m_axi_hostm_d_ARID = 1'd0;

assign m_axi_hostm_d_ARLEN = 32'd0;

assign m_axi_hostm_d_ARLOCK = 2'd0;

assign m_axi_hostm_d_ARPROT = 3'd0;

assign m_axi_hostm_d_ARQOS = 4'd0;

assign m_axi_hostm_d_ARREGION = 4'd0;

assign m_axi_hostm_d_ARSIZE = 3'd0;

assign m_axi_hostm_d_ARUSER = 1'd0;

assign m_axi_hostm_d_ARVALID = 1'b0;

assign m_axi_hostm_d_AWADDR = tmp_64_i_fu_188_p1;

assign m_axi_hostm_d_AWBURST = 2'd0;

assign m_axi_hostm_d_AWCACHE = 4'd0;

assign m_axi_hostm_d_AWID = 1'd0;

assign m_axi_hostm_d_AWLEN = 32'd1;

assign m_axi_hostm_d_AWLOCK = 2'd0;

assign m_axi_hostm_d_AWPROT = 3'd0;

assign m_axi_hostm_d_AWQOS = 4'd0;

assign m_axi_hostm_d_AWREGION = 4'd0;

assign m_axi_hostm_d_AWSIZE = 3'd0;

assign m_axi_hostm_d_AWUSER = 1'd0;

assign m_axi_hostm_d_RREADY = 1'b0;

assign m_axi_hostm_d_WDATA = tmp_i_reg_202;

assign m_axi_hostm_d_WID = 1'd0;

assign m_axi_hostm_d_WLAST = 1'b0;

assign m_axi_hostm_d_WSTRB = 4'd15;

assign m_axi_hostm_d_WUSER = 1'd0;

assign queue_addr_map_address0 = tmp_i_62_fu_133_p1;

assign queue_offset_fu_161_p2 = ($signed(tmp_924_fu_155_p2) + $signed(extLd_i_fu_151_p1));

assign tmp_105_fu_146_p1 = $signed(tmp_s_fu_138_p3);

assign tmp_60_i_fu_167_p2 = (local_head_reg_217 + 32'd1);

assign tmp_61_i_fu_177_p2 = ($signed(MESS_NUM) + $signed(32'd4294967295));

assign tmp_62_i_fu_183_p2 = ((local_head_reg_217 == tmp_61_i_fu_177_p2) ? 1'b1 : 1'b0);

assign tmp_64_i_fu_188_p1 = $signed(queue_offset_reg_223);

assign tmp_924_fu_155_p2 = queue_metadata_q0 << 32'd4;

assign tmp_i_62_fu_133_p0 = compute_core_id_out_1_0_dout;

assign tmp_i_62_fu_133_p1 = tmp_i_62_fu_133_p0;

assign tmp_nbreadreq_fu_64_p4 = (compute_core_id_out_s_1_empty_n & compute_core_id_out_1_0_empty_n);

assign tmp_s_fu_138_p1 = compute_core_id_out_1_0_dout;

assign tmp_s_fu_138_p3 = {{tmp_s_fu_138_p1}, {2'd0}};

always @ (posedge ap_clk) begin
    queue_metadata_addr_reg_207[1:0] <= 2'b00;
end

endmodule //doorbell_dataflow
