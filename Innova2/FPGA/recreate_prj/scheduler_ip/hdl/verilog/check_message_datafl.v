// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module check_message_datafl (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_m_d_AWVALID,
        m_axi_m_d_AWREADY,
        m_axi_m_d_AWADDR,
        m_axi_m_d_AWID,
        m_axi_m_d_AWLEN,
        m_axi_m_d_AWSIZE,
        m_axi_m_d_AWBURST,
        m_axi_m_d_AWLOCK,
        m_axi_m_d_AWCACHE,
        m_axi_m_d_AWPROT,
        m_axi_m_d_AWQOS,
        m_axi_m_d_AWREGION,
        m_axi_m_d_AWUSER,
        m_axi_m_d_WVALID,
        m_axi_m_d_WREADY,
        m_axi_m_d_WDATA,
        m_axi_m_d_WSTRB,
        m_axi_m_d_WLAST,
        m_axi_m_d_WID,
        m_axi_m_d_WUSER,
        m_axi_m_d_ARVALID,
        m_axi_m_d_ARREADY,
        m_axi_m_d_ARADDR,
        m_axi_m_d_ARID,
        m_axi_m_d_ARLEN,
        m_axi_m_d_ARSIZE,
        m_axi_m_d_ARBURST,
        m_axi_m_d_ARLOCK,
        m_axi_m_d_ARCACHE,
        m_axi_m_d_ARPROT,
        m_axi_m_d_ARQOS,
        m_axi_m_d_ARREGION,
        m_axi_m_d_ARUSER,
        m_axi_m_d_RVALID,
        m_axi_m_d_RREADY,
        m_axi_m_d_RDATA,
        m_axi_m_d_RLAST,
        m_axi_m_d_RID,
        m_axi_m_d_RUSER,
        m_axi_m_d_RRESP,
        m_axi_m_d_BVALID,
        m_axi_m_d_BREADY,
        m_axi_m_d_BRESP,
        m_axi_m_d_BID,
        m_axi_m_d_BUSER,
        jj_i,
        jj_o,
        jj_o_ap_vld,
        slot_offset1_address0,
        slot_offset1_ce0,
        slot_offset1_q0,
        RRB1_address0,
        RRB1_ce0,
        RRB1_we0,
        RRB1_d0,
        RRB1_q0,
        slot_partition1,
        check_msg_out1_V_i_din,
        check_msg_out1_V_i_full_n,
        check_msg_out1_V_i_write,
        check_msg_out1_V_cor_din,
        check_msg_out1_V_cor_full_n,
        check_msg_out1_V_cor_write,
        check_msg_out1_V_old_din,
        check_msg_out1_V_old_full_n,
        check_msg_out1_V_old_write,
        check_msg_out1_V_new_din,
        check_msg_out1_V_new_full_n,
        check_msg_out1_V_new_write
);

parameter    ap_ST_fsm_state1 = 6'd0;
parameter    ap_ST_fsm_state2 = 6'd1;
parameter    ap_ST_fsm_state3 = 6'd2;
parameter    ap_ST_fsm_state4 = 6'd3;
parameter    ap_ST_fsm_state5 = 6'd4;
parameter    ap_ST_fsm_state6 = 6'd5;
parameter    ap_ST_fsm_state7 = 6'd6;
parameter    ap_ST_fsm_state8 = 6'd7;
parameter    ap_ST_fsm_state9 = 6'd8;
parameter    ap_ST_fsm_state10 = 6'd9;
parameter    ap_ST_fsm_state11 = 6'd10;
parameter    ap_ST_fsm_state12 = 6'd11;
parameter    ap_ST_fsm_state13 = 6'd12;
parameter    ap_ST_fsm_state14 = 6'd13;
parameter    ap_ST_fsm_state15 = 6'd14;
parameter    ap_ST_fsm_state16 = 6'd15;
parameter    ap_ST_fsm_state17 = 6'd16;
parameter    ap_ST_fsm_state18 = 6'd17;
parameter    ap_ST_fsm_state19 = 6'd18;
parameter    ap_ST_fsm_state20 = 6'd19;
parameter    ap_ST_fsm_state21 = 6'd20;
parameter    ap_ST_fsm_state22 = 6'd21;
parameter    ap_ST_fsm_state23 = 6'd22;
parameter    ap_ST_fsm_state24 = 6'd23;
parameter    ap_ST_fsm_state25 = 6'd24;
parameter    ap_ST_fsm_state26 = 6'd25;
parameter    ap_ST_fsm_state27 = 6'd26;
parameter    ap_ST_fsm_state28 = 6'd27;
parameter    ap_ST_fsm_state29 = 6'd28;
parameter    ap_ST_fsm_state30 = 6'd29;
parameter    ap_ST_fsm_state31 = 6'd30;
parameter    ap_ST_fsm_state32 = 6'd31;
parameter    ap_ST_fsm_state33 = 6'd32;
parameter    ap_ST_fsm_state34 = 6'd33;
parameter    ap_ST_fsm_state35 = 6'd34;
parameter    ap_ST_fsm_state36 = 6'd35;
parameter    ap_ST_fsm_state37 = 6'd36;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_m_d_AWVALID;
input   m_axi_m_d_AWREADY;
output  [31:0] m_axi_m_d_AWADDR;
output  [0:0] m_axi_m_d_AWID;
output  [31:0] m_axi_m_d_AWLEN;
output  [2:0] m_axi_m_d_AWSIZE;
output  [1:0] m_axi_m_d_AWBURST;
output  [1:0] m_axi_m_d_AWLOCK;
output  [3:0] m_axi_m_d_AWCACHE;
output  [2:0] m_axi_m_d_AWPROT;
output  [3:0] m_axi_m_d_AWQOS;
output  [3:0] m_axi_m_d_AWREGION;
output  [0:0] m_axi_m_d_AWUSER;
output   m_axi_m_d_WVALID;
input   m_axi_m_d_WREADY;
output  [31:0] m_axi_m_d_WDATA;
output  [3:0] m_axi_m_d_WSTRB;
output   m_axi_m_d_WLAST;
output  [0:0] m_axi_m_d_WID;
output  [0:0] m_axi_m_d_WUSER;
output   m_axi_m_d_ARVALID;
input   m_axi_m_d_ARREADY;
output  [31:0] m_axi_m_d_ARADDR;
output  [0:0] m_axi_m_d_ARID;
output  [31:0] m_axi_m_d_ARLEN;
output  [2:0] m_axi_m_d_ARSIZE;
output  [1:0] m_axi_m_d_ARBURST;
output  [1:0] m_axi_m_d_ARLOCK;
output  [3:0] m_axi_m_d_ARCACHE;
output  [2:0] m_axi_m_d_ARPROT;
output  [3:0] m_axi_m_d_ARQOS;
output  [3:0] m_axi_m_d_ARREGION;
output  [0:0] m_axi_m_d_ARUSER;
input   m_axi_m_d_RVALID;
output   m_axi_m_d_RREADY;
input  [31:0] m_axi_m_d_RDATA;
input   m_axi_m_d_RLAST;
input  [0:0] m_axi_m_d_RID;
input  [0:0] m_axi_m_d_RUSER;
input  [1:0] m_axi_m_d_RRESP;
input   m_axi_m_d_BVALID;
output   m_axi_m_d_BREADY;
input  [1:0] m_axi_m_d_BRESP;
input  [0:0] m_axi_m_d_BID;
input  [0:0] m_axi_m_d_BUSER;
input  [31:0] jj_i;
output  [31:0] jj_o;
output   jj_o_ap_vld;
output  [6:0] slot_offset1_address0;
output   slot_offset1_ce0;
input  [30:0] slot_offset1_q0;
output  [6:0] RRB1_address0;
output   RRB1_ce0;
output   RRB1_we0;
output  [15:0] RRB1_d0;
input  [15:0] RRB1_q0;
input  [31:0] slot_partition1;
output  [31:0] check_msg_out1_V_i_din;
input   check_msg_out1_V_i_full_n;
output   check_msg_out1_V_i_write;
output  [31:0] check_msg_out1_V_cor_din;
input   check_msg_out1_V_cor_full_n;
output   check_msg_out1_V_cor_write;
output  [511:0] check_msg_out1_V_old_din;
input   check_msg_out1_V_old_full_n;
output   check_msg_out1_V_old_write;
output  [511:0] check_msg_out1_V_new_din;
input   check_msg_out1_V_new_full_n;
output   check_msg_out1_V_new_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_m_d_ARVALID;
reg[31:0] m_axi_m_d_ARADDR;
reg[0:0] m_axi_m_d_ARID;
reg[31:0] m_axi_m_d_ARLEN;
reg[2:0] m_axi_m_d_ARSIZE;
reg[1:0] m_axi_m_d_ARBURST;
reg[1:0] m_axi_m_d_ARLOCK;
reg[3:0] m_axi_m_d_ARCACHE;
reg[2:0] m_axi_m_d_ARPROT;
reg[3:0] m_axi_m_d_ARQOS;
reg[3:0] m_axi_m_d_ARREGION;
reg[0:0] m_axi_m_d_ARUSER;
reg m_axi_m_d_RREADY;
reg[31:0] jj_o;
reg jj_o_ap_vld;
reg slot_offset1_ce0;
reg[6:0] RRB1_address0;
reg RRB1_ce0;
reg RRB1_we0;

reg    ap_done_reg;
reg   [5:0] ap_CS_fsm;
reg    features1_V_ce0;
reg    features1_V_we0;
wire   [511:0] features1_V_q0;
reg    m_d_blk_n_AR;
reg    m_d_blk_n_R;
wire    grp_load_feature_fu_135_m_d_blk_n_AR;
wire    grp_load_feature_fu_135_m_d_blk_n_R;
reg    check_msg_out1_V_i_blk_n;
reg   [0:0] tmp_69_i_reg_306;
reg    check_msg_out1_V_cor_blk_n;
reg    check_msg_out1_V_old_blk_n;
reg    check_msg_out1_V_new_blk_n;
reg  signed [31:0] j_reg_256;
reg    ap_block_state1;
wire  signed [63:0] tmp_i_fu_146_p1;
reg  signed [63:0] tmp_i_reg_263;
wire  signed [31:0] now_slot_offset1_fu_151_p1;
reg  signed [31:0] now_slot_offset1_reg_274;
wire   [31:0] sum_i_fu_155_p2;
reg   [31:0] sum_i_reg_279;
reg    ap_sig_ioackin_m_axi_m_d_ARREADY;
wire   [15:0] core_id_fu_171_p1;
reg   [15:0] core_id_reg_290;
reg   [15:0] tmp_RRB_reg_295;
reg   [6:0] RRB1_addr_reg_301;
wire   [0:0] tmp_69_i_fu_202_p2;
reg   [6:0] features1_V_addr_reg_316;
wire   [511:0] grp_load_feature_fu_135_ap_return;
reg   [511:0] tmp_msg_new_features_reg_326;
reg    ap_block_state36;
wire    grp_load_feature_fu_135_ap_start;
wire    grp_load_feature_fu_135_ap_done;
wire    grp_load_feature_fu_135_ap_idle;
wire    grp_load_feature_fu_135_ap_ready;
wire    grp_load_feature_fu_135_m_axi_m_d_AWVALID;
wire   [31:0] grp_load_feature_fu_135_m_axi_m_d_AWADDR;
wire   [0:0] grp_load_feature_fu_135_m_axi_m_d_AWID;
wire   [31:0] grp_load_feature_fu_135_m_axi_m_d_AWLEN;
wire   [2:0] grp_load_feature_fu_135_m_axi_m_d_AWSIZE;
wire   [1:0] grp_load_feature_fu_135_m_axi_m_d_AWBURST;
wire   [1:0] grp_load_feature_fu_135_m_axi_m_d_AWLOCK;
wire   [3:0] grp_load_feature_fu_135_m_axi_m_d_AWCACHE;
wire   [2:0] grp_load_feature_fu_135_m_axi_m_d_AWPROT;
wire   [3:0] grp_load_feature_fu_135_m_axi_m_d_AWQOS;
wire   [3:0] grp_load_feature_fu_135_m_axi_m_d_AWREGION;
wire   [0:0] grp_load_feature_fu_135_m_axi_m_d_AWUSER;
wire    grp_load_feature_fu_135_m_axi_m_d_WVALID;
wire   [31:0] grp_load_feature_fu_135_m_axi_m_d_WDATA;
wire   [3:0] grp_load_feature_fu_135_m_axi_m_d_WSTRB;
wire    grp_load_feature_fu_135_m_axi_m_d_WLAST;
wire   [0:0] grp_load_feature_fu_135_m_axi_m_d_WID;
wire   [0:0] grp_load_feature_fu_135_m_axi_m_d_WUSER;
wire    grp_load_feature_fu_135_m_axi_m_d_ARVALID;
wire   [31:0] grp_load_feature_fu_135_m_axi_m_d_ARADDR;
wire   [0:0] grp_load_feature_fu_135_m_axi_m_d_ARID;
wire   [31:0] grp_load_feature_fu_135_m_axi_m_d_ARLEN;
wire   [2:0] grp_load_feature_fu_135_m_axi_m_d_ARSIZE;
wire   [1:0] grp_load_feature_fu_135_m_axi_m_d_ARBURST;
wire   [1:0] grp_load_feature_fu_135_m_axi_m_d_ARLOCK;
wire   [3:0] grp_load_feature_fu_135_m_axi_m_d_ARCACHE;
wire   [2:0] grp_load_feature_fu_135_m_axi_m_d_ARPROT;
wire   [3:0] grp_load_feature_fu_135_m_axi_m_d_ARQOS;
wire   [3:0] grp_load_feature_fu_135_m_axi_m_d_ARREGION;
wire   [0:0] grp_load_feature_fu_135_m_axi_m_d_ARUSER;
wire    grp_load_feature_fu_135_m_axi_m_d_RREADY;
wire    grp_load_feature_fu_135_m_axi_m_d_BREADY;
wire   [31:0] grp_load_feature_fu_135_offset;
reg    grp_load_feature_fu_135_ap_start_reg;
reg   [5:0] ap_NS_fsm;
wire  signed [63:0] sum_cast_i_fu_161_p1;
reg    ap_reg_ioackin_m_axi_m_d_ARREADY;
reg    check_msg_out1_V_i1_update;
wire    check_msg_out1_V_i1_status;
reg    ap_block_state37;
wire   [31:0] storemerge_i_fu_242_p3;
wire  signed [31:0] tmp_i_fu_146_p0;
wire   [31:0] extLd5_i_fu_192_p1;
wire   [31:0] tmp_66_i_fu_185_p3;
wire   [31:0] tmp_68_i_fu_196_p2;
wire   [31:0] tmp_71_i_fu_227_p2;
wire   [0:0] tmp_72_i_fu_232_p2;
wire   [31:0] tmp_73_i_fu_237_p2;
reg    ap_block_state14;
reg    ap_block_state21;
reg    ap_block_state22;
reg    ap_block_state23;
reg    ap_block_state24;
reg    ap_block_state25;
reg    ap_block_state26;
reg    ap_block_state27;
reg    ap_block_state28;
reg    ap_block_state29;
reg    ap_block_state30;
reg    ap_block_state31;
reg    ap_block_state32;
reg    ap_block_state33;
reg    ap_block_state34;
reg    ap_block_state35;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd0;
#0 tmp_69_i_reg_306 = 1'd0;
#0 j_reg_256 = 32'd0;
#0 tmp_i_reg_263 = 64'd0;
#0 now_slot_offset1_reg_274 = 32'd0;
#0 sum_i_reg_279 = 32'd0;
#0 core_id_reg_290 = 16'd0;
#0 tmp_RRB_reg_295 = 16'd0;
#0 RRB1_addr_reg_301 = 7'd0;
#0 features1_V_addr_reg_316 = 7'd0;
#0 tmp_msg_new_features_reg_326 = 512'd0;
#0 grp_load_feature_fu_135_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_m_axi_m_d_ARREADY = 1'b0;
end

check_message_datbkb #(
    .DataWidth( 512 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
features1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(features1_V_addr_reg_316),
    .ce0(features1_V_ce0),
    .we0(features1_V_we0),
    .d0(tmp_msg_new_features_reg_326),
    .q0(features1_V_q0)
);

load_feature grp_load_feature_fu_135(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load_feature_fu_135_ap_start),
    .ap_done(grp_load_feature_fu_135_ap_done),
    .ap_idle(grp_load_feature_fu_135_ap_idle),
    .ap_ready(grp_load_feature_fu_135_ap_ready),
    .m_axi_m_d_AWVALID(grp_load_feature_fu_135_m_axi_m_d_AWVALID),
    .m_axi_m_d_AWREADY(1'b0),
    .m_axi_m_d_AWADDR(grp_load_feature_fu_135_m_axi_m_d_AWADDR),
    .m_axi_m_d_AWID(grp_load_feature_fu_135_m_axi_m_d_AWID),
    .m_axi_m_d_AWLEN(grp_load_feature_fu_135_m_axi_m_d_AWLEN),
    .m_axi_m_d_AWSIZE(grp_load_feature_fu_135_m_axi_m_d_AWSIZE),
    .m_axi_m_d_AWBURST(grp_load_feature_fu_135_m_axi_m_d_AWBURST),
    .m_axi_m_d_AWLOCK(grp_load_feature_fu_135_m_axi_m_d_AWLOCK),
    .m_axi_m_d_AWCACHE(grp_load_feature_fu_135_m_axi_m_d_AWCACHE),
    .m_axi_m_d_AWPROT(grp_load_feature_fu_135_m_axi_m_d_AWPROT),
    .m_axi_m_d_AWQOS(grp_load_feature_fu_135_m_axi_m_d_AWQOS),
    .m_axi_m_d_AWREGION(grp_load_feature_fu_135_m_axi_m_d_AWREGION),
    .m_axi_m_d_AWUSER(grp_load_feature_fu_135_m_axi_m_d_AWUSER),
    .m_axi_m_d_WVALID(grp_load_feature_fu_135_m_axi_m_d_WVALID),
    .m_axi_m_d_WREADY(1'b0),
    .m_axi_m_d_WDATA(grp_load_feature_fu_135_m_axi_m_d_WDATA),
    .m_axi_m_d_WSTRB(grp_load_feature_fu_135_m_axi_m_d_WSTRB),
    .m_axi_m_d_WLAST(grp_load_feature_fu_135_m_axi_m_d_WLAST),
    .m_axi_m_d_WID(grp_load_feature_fu_135_m_axi_m_d_WID),
    .m_axi_m_d_WUSER(grp_load_feature_fu_135_m_axi_m_d_WUSER),
    .m_axi_m_d_ARVALID(grp_load_feature_fu_135_m_axi_m_d_ARVALID),
    .m_axi_m_d_ARREADY(m_axi_m_d_ARREADY),
    .m_axi_m_d_ARADDR(grp_load_feature_fu_135_m_axi_m_d_ARADDR),
    .m_axi_m_d_ARID(grp_load_feature_fu_135_m_axi_m_d_ARID),
    .m_axi_m_d_ARLEN(grp_load_feature_fu_135_m_axi_m_d_ARLEN),
    .m_axi_m_d_ARSIZE(grp_load_feature_fu_135_m_axi_m_d_ARSIZE),
    .m_axi_m_d_ARBURST(grp_load_feature_fu_135_m_axi_m_d_ARBURST),
    .m_axi_m_d_ARLOCK(grp_load_feature_fu_135_m_axi_m_d_ARLOCK),
    .m_axi_m_d_ARCACHE(grp_load_feature_fu_135_m_axi_m_d_ARCACHE),
    .m_axi_m_d_ARPROT(grp_load_feature_fu_135_m_axi_m_d_ARPROT),
    .m_axi_m_d_ARQOS(grp_load_feature_fu_135_m_axi_m_d_ARQOS),
    .m_axi_m_d_ARREGION(grp_load_feature_fu_135_m_axi_m_d_ARREGION),
    .m_axi_m_d_ARUSER(grp_load_feature_fu_135_m_axi_m_d_ARUSER),
    .m_axi_m_d_RVALID(m_axi_m_d_RVALID),
    .m_axi_m_d_RREADY(grp_load_feature_fu_135_m_axi_m_d_RREADY),
    .m_axi_m_d_RDATA(m_axi_m_d_RDATA),
    .m_axi_m_d_RLAST(m_axi_m_d_RLAST),
    .m_axi_m_d_RID(m_axi_m_d_RID),
    .m_axi_m_d_RUSER(m_axi_m_d_RUSER),
    .m_axi_m_d_RRESP(m_axi_m_d_RRESP),
    .m_axi_m_d_BVALID(1'b0),
    .m_axi_m_d_BREADY(grp_load_feature_fu_135_m_axi_m_d_BREADY),
    .m_axi_m_d_BRESP(2'd0),
    .m_axi_m_d_BID(1'd0),
    .m_axi_m_d_BUSER(1'd0),
    .offset(grp_load_feature_fu_135_offset),
    .ap_return(grp_load_feature_fu_135_ap_return),
    .m_d_blk_n_AR(grp_load_feature_fu_135_m_d_blk_n_AR),
    .m_d_blk_n_R(grp_load_feature_fu_135_m_d_blk_n_R)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        RRB1_addr_reg_301 <= 7'd0;
    end else begin
        if (((m_axi_m_d_RVALID == 1'b1) & (ap_ST_fsm_state10 == ap_CS_fsm))) begin
            RRB1_addr_reg_301 <= tmp_i_reg_263;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_m_d_ARREADY <= 1'b0;
    end else begin
        if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
            if ((ap_sig_ioackin_m_axi_m_d_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_m_d_ARREADY <= 1'b0;
            end else if ((m_axi_m_d_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_m_d_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        core_id_reg_290 <= 16'd0;
    end else begin
        if (((m_axi_m_d_RVALID == 1'b1) & (ap_ST_fsm_state10 == ap_CS_fsm))) begin
            core_id_reg_290 <= core_id_fu_171_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        features1_V_addr_reg_316 <= 7'd0;
    end else begin
        if (((tmp_69_i_fu_202_p2 == 1'd1) & (ap_ST_fsm_state11 == ap_CS_fsm))) begin
            features1_V_addr_reg_316 <= tmp_i_reg_263;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load_feature_fu_135_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_ST_fsm_state12 == ap_NS_fsm) & (ap_ST_fsm_state11 == ap_CS_fsm))) begin
            grp_load_feature_fu_135_ap_start_reg <= 1'b1;
        end else if ((grp_load_feature_fu_135_ap_ready == 1'b1)) begin
            grp_load_feature_fu_135_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        j_reg_256 <= 32'd0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (ap_ST_fsm_state1 == ap_CS_fsm))) begin
            j_reg_256 <= jj_i;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        now_slot_offset1_reg_274 <= 32'd0;
    end else begin
        if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
            now_slot_offset1_reg_274 <= now_slot_offset1_fu_151_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        sum_i_reg_279 <= 32'd0;
    end else begin
        if ((ap_ST_fsm_state2 == ap_CS_fsm)) begin
            sum_i_reg_279 <= sum_i_fu_155_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_69_i_reg_306 <= 1'd0;
    end else begin
        if ((ap_ST_fsm_state11 == ap_CS_fsm)) begin
            tmp_69_i_reg_306 <= tmp_69_i_fu_202_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_RRB_reg_295 <= 16'd0;
    end else begin
        if (((m_axi_m_d_RVALID == 1'b1) & (ap_ST_fsm_state10 == ap_CS_fsm))) begin
            tmp_RRB_reg_295 <= {{m_axi_m_d_RDATA[31:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_i_reg_263 <= 64'd0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (ap_ST_fsm_state1 == ap_CS_fsm))) begin
            tmp_i_reg_263 <= tmp_i_fu_146_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_msg_new_features_reg_326 <= 512'd0;
    end else begin
        if (((ap_ST_fsm_state36 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
            tmp_msg_new_features_reg_326 <= grp_load_feature_fu_135_ap_return;
        end
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state11 == ap_CS_fsm)) begin
        RRB1_address0 = RRB1_addr_reg_301;
    end else if ((ap_ST_fsm_state10 == ap_CS_fsm)) begin
        RRB1_address0 = tmp_i_reg_263;
    end else begin
        RRB1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state11 == ap_CS_fsm) | ((m_axi_m_d_RVALID == 1'b1) & (ap_ST_fsm_state10 == ap_CS_fsm)))) begin
        RRB1_ce0 = 1'b1;
    end else begin
        RRB1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_69_i_fu_202_p2 == 1'd1) & (ap_ST_fsm_state11 == ap_CS_fsm))) begin
        RRB1_we0 = 1'b1;
    end else begin
        RRB1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state1 == ap_CS_fsm) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_m_d_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_m_d_ARREADY = m_axi_m_d_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_m_d_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state37 == ap_CS_fsm) & (tmp_69_i_reg_306 == 1'd1))) begin
        check_msg_out1_V_cor_blk_n = check_msg_out1_V_cor_full_n;
    end else begin
        check_msg_out1_V_cor_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm) & (tmp_69_i_reg_306 == 1'd1))) begin
        check_msg_out1_V_i1_update = 1'b1;
    end else begin
        check_msg_out1_V_i1_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state37 == ap_CS_fsm) & (tmp_69_i_reg_306 == 1'd1))) begin
        check_msg_out1_V_i_blk_n = check_msg_out1_V_i_full_n;
    end else begin
        check_msg_out1_V_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state37 == ap_CS_fsm) & (tmp_69_i_reg_306 == 1'd1))) begin
        check_msg_out1_V_new_blk_n = check_msg_out1_V_new_full_n;
    end else begin
        check_msg_out1_V_new_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state37 == ap_CS_fsm) & (tmp_69_i_reg_306 == 1'd1))) begin
        check_msg_out1_V_old_blk_n = check_msg_out1_V_old_full_n;
    end else begin
        check_msg_out1_V_old_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm)) | ((ap_ST_fsm_state36 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1)))) begin
        features1_V_ce0 = 1'b1;
    end else begin
        features1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm) & (tmp_69_i_reg_306 == 1'd1))) begin
        features1_V_we0 = 1'b1;
    end else begin
        features1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm))) begin
        jj_o = storemerge_i_fu_242_p3;
    end else begin
        jj_o = jj_i;
    end
end

always @ (*) begin
    if ((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm))) begin
        jj_o_ap_vld = 1'b1;
    end else begin
        jj_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state3 == ap_CS_fsm) & (ap_reg_ioackin_m_axi_m_d_ARREADY == 1'b0))) begin
        m_axi_m_d_ARADDR = sum_cast_i_fu_161_p1;
    end else if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARADDR = grp_load_feature_fu_135_m_axi_m_d_ARADDR;
    end else begin
        m_axi_m_d_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARBURST = grp_load_feature_fu_135_m_axi_m_d_ARBURST;
    end else begin
        m_axi_m_d_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARCACHE = grp_load_feature_fu_135_m_axi_m_d_ARCACHE;
    end else begin
        m_axi_m_d_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARID = grp_load_feature_fu_135_m_axi_m_d_ARID;
    end else begin
        m_axi_m_d_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state3 == ap_CS_fsm) & (ap_reg_ioackin_m_axi_m_d_ARREADY == 1'b0))) begin
        m_axi_m_d_ARLEN = 32'd1;
    end else if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARLEN = grp_load_feature_fu_135_m_axi_m_d_ARLEN;
    end else begin
        m_axi_m_d_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARLOCK = grp_load_feature_fu_135_m_axi_m_d_ARLOCK;
    end else begin
        m_axi_m_d_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARPROT = grp_load_feature_fu_135_m_axi_m_d_ARPROT;
    end else begin
        m_axi_m_d_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARQOS = grp_load_feature_fu_135_m_axi_m_d_ARQOS;
    end else begin
        m_axi_m_d_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARREGION = grp_load_feature_fu_135_m_axi_m_d_ARREGION;
    end else begin
        m_axi_m_d_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARSIZE = grp_load_feature_fu_135_m_axi_m_d_ARSIZE;
    end else begin
        m_axi_m_d_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARUSER = grp_load_feature_fu_135_m_axi_m_d_ARUSER;
    end else begin
        m_axi_m_d_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state3 == ap_CS_fsm) & (ap_reg_ioackin_m_axi_m_d_ARREADY == 1'b0))) begin
        m_axi_m_d_ARVALID = 1'b1;
    end else if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_ARVALID = grp_load_feature_fu_135_m_axi_m_d_ARVALID;
    end else begin
        m_axi_m_d_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_m_d_RVALID == 1'b1) & (ap_ST_fsm_state10 == ap_CS_fsm))) begin
        m_axi_m_d_RREADY = 1'b1;
    end else if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state20 == ap_CS_fsm) | (ap_ST_fsm_state19 == ap_CS_fsm) | (ap_ST_fsm_state18 == ap_CS_fsm) | (ap_ST_fsm_state17 == ap_CS_fsm) | (ap_ST_fsm_state16 == ap_CS_fsm) | (ap_ST_fsm_state15 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm) | (ap_ST_fsm_state13 == ap_CS_fsm) | (ap_ST_fsm_state12 == ap_CS_fsm))) begin
        m_axi_m_d_RREADY = grp_load_feature_fu_135_m_axi_m_d_RREADY;
    end else begin
        m_axi_m_d_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm))) begin
        m_d_blk_n_AR = grp_load_feature_fu_135_m_d_blk_n_AR;
    end else if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        m_d_blk_n_AR = m_axi_m_d_ARREADY;
    end else begin
        m_d_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_ST_fsm_state36 == ap_CS_fsm) | (ap_ST_fsm_state35 == ap_CS_fsm) | (ap_ST_fsm_state34 == ap_CS_fsm) | (ap_ST_fsm_state33 == ap_CS_fsm) | (ap_ST_fsm_state32 == ap_CS_fsm) | (ap_ST_fsm_state31 == ap_CS_fsm) | (ap_ST_fsm_state30 == ap_CS_fsm) | (ap_ST_fsm_state29 == ap_CS_fsm) | (ap_ST_fsm_state28 == ap_CS_fsm) | (ap_ST_fsm_state27 == ap_CS_fsm) | (ap_ST_fsm_state26 == ap_CS_fsm) | (ap_ST_fsm_state25 == ap_CS_fsm) | (ap_ST_fsm_state24 == ap_CS_fsm) | (ap_ST_fsm_state23 == ap_CS_fsm) | (ap_ST_fsm_state22 == ap_CS_fsm) | (ap_ST_fsm_state21 == ap_CS_fsm) | (ap_ST_fsm_state14 == ap_CS_fsm))) begin
        m_d_blk_n_R = grp_load_feature_fu_135_m_d_blk_n_R;
    end else if ((ap_ST_fsm_state10 == ap_CS_fsm)) begin
        m_d_blk_n_R = m_axi_m_d_RVALID;
    end else begin
        m_d_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (ap_ST_fsm_state1 == ap_CS_fsm))) begin
        slot_offset1_ce0 = 1'b1;
    end else begin
        slot_offset1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (ap_ST_fsm_state1 == ap_CS_fsm))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((ap_ST_fsm_state3 == ap_CS_fsm) & (ap_sig_ioackin_m_axi_m_d_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_m_d_RVALID == 1'b1) & (ap_ST_fsm_state10 == ap_CS_fsm))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((ap_ST_fsm_state11 == ap_CS_fsm) & (tmp_69_i_fu_202_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if ((((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1) & (ap_ST_fsm_state14 == ap_CS_fsm))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if ((((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1) & (ap_ST_fsm_state21 == ap_CS_fsm))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((ap_ST_fsm_state22 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((ap_ST_fsm_state23 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((ap_ST_fsm_state24 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((ap_ST_fsm_state25 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((ap_ST_fsm_state26 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((ap_ST_fsm_state27 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((ap_ST_fsm_state28 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((ap_ST_fsm_state29 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((ap_ST_fsm_state30 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((ap_ST_fsm_state31 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((ap_ST_fsm_state32 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((ap_ST_fsm_state33 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((ap_ST_fsm_state34 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((ap_ST_fsm_state35 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((ap_ST_fsm_state36 == ap_CS_fsm) & ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if ((~((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1)) & (ap_ST_fsm_state37 == ap_CS_fsm))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RRB1_d0 = tmp_RRB_reg_295;

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state21 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state22 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state23 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state24 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state25 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state26 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state27 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state28 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state29 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state30 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state31 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state32 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state33 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state34 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state35 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state36 = ((grp_load_feature_fu_135_m_d_blk_n_R & grp_load_feature_fu_135_m_d_blk_n_AR) == 1'b0);
end

always @ (*) begin
    ap_block_state37 = ((check_msg_out1_V_i1_status == 1'b0) & (tmp_69_i_reg_306 == 1'd1));
end

assign check_msg_out1_V_cor_din = core_id_reg_290;

assign check_msg_out1_V_cor_write = check_msg_out1_V_i1_update;

assign check_msg_out1_V_i1_status = (check_msg_out1_V_old_full_n & check_msg_out1_V_new_full_n & check_msg_out1_V_i_full_n & check_msg_out1_V_cor_full_n);

assign check_msg_out1_V_i_din = ($signed(j_reg_256) + $signed(slot_partition1));

assign check_msg_out1_V_i_write = check_msg_out1_V_i1_update;

assign check_msg_out1_V_new_din = tmp_msg_new_features_reg_326;

assign check_msg_out1_V_new_write = check_msg_out1_V_i1_update;

assign check_msg_out1_V_old_din = features1_V_q0;

assign check_msg_out1_V_old_write = check_msg_out1_V_i1_update;

assign core_id_fu_171_p1 = m_axi_m_d_RDATA[15:0];

assign extLd5_i_fu_192_p1 = RRB1_q0;

assign grp_load_feature_fu_135_ap_start = grp_load_feature_fu_135_ap_start_reg;

assign grp_load_feature_fu_135_offset = ($signed(now_slot_offset1_reg_274) + $signed(32'd4294967280));

assign m_axi_m_d_AWADDR = 32'd0;

assign m_axi_m_d_AWBURST = 2'd0;

assign m_axi_m_d_AWCACHE = 4'd0;

assign m_axi_m_d_AWID = 1'd0;

assign m_axi_m_d_AWLEN = 32'd0;

assign m_axi_m_d_AWLOCK = 2'd0;

assign m_axi_m_d_AWPROT = 3'd0;

assign m_axi_m_d_AWQOS = 4'd0;

assign m_axi_m_d_AWREGION = 4'd0;

assign m_axi_m_d_AWSIZE = 3'd0;

assign m_axi_m_d_AWUSER = 1'd0;

assign m_axi_m_d_AWVALID = 1'b0;

assign m_axi_m_d_BREADY = 1'b0;

assign m_axi_m_d_WDATA = 32'd0;

assign m_axi_m_d_WID = 1'd0;

assign m_axi_m_d_WLAST = 1'b0;

assign m_axi_m_d_WSTRB = 4'd0;

assign m_axi_m_d_WUSER = 1'd0;

assign m_axi_m_d_WVALID = 1'b0;

assign now_slot_offset1_fu_151_p1 = $signed(slot_offset1_q0);

assign slot_offset1_address0 = tmp_i_fu_146_p1;

assign storemerge_i_fu_242_p3 = ((tmp_72_i_fu_232_p2[0:0] === 1'b1) ? 32'd0 : tmp_73_i_fu_237_p2);

assign sum_cast_i_fu_161_p1 = $signed(sum_i_reg_279);

assign sum_i_fu_155_p2 = ($signed(32'd262144) + $signed(now_slot_offset1_fu_151_p1));

assign tmp_66_i_fu_185_p3 = {{16'd65535}, {tmp_RRB_reg_295}};

assign tmp_68_i_fu_196_p2 = (extLd5_i_fu_192_p1 ^ 32'd4294967295);

assign tmp_69_i_fu_202_p2 = ((tmp_66_i_fu_185_p3 == tmp_68_i_fu_196_p2) ? 1'b1 : 1'b0);

assign tmp_71_i_fu_227_p2 = ($signed(slot_partition1) + $signed(32'd4294967295));

assign tmp_72_i_fu_232_p2 = ((j_reg_256 == tmp_71_i_fu_227_p2) ? 1'b1 : 1'b0);

assign tmp_73_i_fu_237_p2 = ($signed(j_reg_256) + $signed(32'd1));

assign tmp_i_fu_146_p0 = jj_i;

assign tmp_i_fu_146_p1 = tmp_i_fu_146_p0;

endmodule //check_message_datafl
