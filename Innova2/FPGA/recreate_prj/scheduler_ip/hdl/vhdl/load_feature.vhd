-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_feature is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_m_d_AWVALID : OUT STD_LOGIC;
    m_axi_m_d_AWREADY : IN STD_LOGIC;
    m_axi_m_d_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_d_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_d_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_WVALID : OUT STD_LOGIC;
    m_axi_m_d_WREADY : IN STD_LOGIC;
    m_axi_m_d_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_WLAST : OUT STD_LOGIC;
    m_axi_m_d_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_ARVALID : OUT STD_LOGIC;
    m_axi_m_d_ARREADY : IN STD_LOGIC;
    m_axi_m_d_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_d_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_d_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_RVALID : IN STD_LOGIC;
    m_axi_m_d_RREADY : OUT STD_LOGIC;
    m_axi_m_d_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_RLAST : IN STD_LOGIC;
    m_axi_m_d_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_BVALID : IN STD_LOGIC;
    m_axi_m_d_BREADY : OUT STD_LOGIC;
    m_axi_m_d_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    offset : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_d_blk_n_AR : OUT STD_LOGIC;
    m_d_blk_n_R : OUT STD_LOGIC );
end;


architecture behav of load_feature is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal sum_fu_60_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_m_d_ARREADY : STD_LOGIC;
    signal ap_block_state19_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal m_d_addr_read_reg_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal m_d_addr_read_16_reg_113 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal m_d_addr_read_17_reg_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal m_d_addr_read_18_reg_123 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal m_d_addr_read_19_reg_128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal m_d_addr_read_20_reg_133 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal m_d_addr_read_21_reg_138 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal m_d_addr_read_22_reg_143 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal m_d_addr_read_23_reg_148 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal m_d_addr_read_24_reg_153 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal m_d_addr_read_25_reg_158 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal m_d_addr_read_26_reg_163 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal m_d_addr_read_27_reg_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal m_d_addr_read_28_reg_173 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal m_d_addr_read_29_reg_178 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_port_reg_offset : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_cast_fu_66_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_m_d_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_ST_fsm_pp0_stage15 = ap_CS_fsm))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_ST_fsm_pp0_stage8 = ap_CS_fsm))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_port_reg_offset_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_port_reg_offset <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ap_port_reg_offset <= offset;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_m_d_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_m_d_ARREADY <= ap_const_logic_0;
            else
                if (((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage2_11001)) then 
                        ap_reg_ioackin_m_axi_m_d_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (m_axi_m_d_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_m_d_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_16_reg_113_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_16_reg_113 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage10 = ap_CS_fsm))) then 
                    m_d_addr_read_16_reg_113 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_17_reg_118_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_17_reg_118 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage11 = ap_CS_fsm))) then 
                    m_d_addr_read_17_reg_118 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_18_reg_123_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_18_reg_123 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage12 = ap_CS_fsm))) then 
                    m_d_addr_read_18_reg_123 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_19_reg_128_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_19_reg_128 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage13 = ap_CS_fsm))) then 
                    m_d_addr_read_19_reg_128 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_20_reg_133_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_20_reg_133 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage14 = ap_CS_fsm))) then 
                    m_d_addr_read_20_reg_133 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_21_reg_138_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_21_reg_138 <= ap_const_lv32_0;
            else
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage15 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
                    m_d_addr_read_21_reg_138 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_22_reg_143_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_22_reg_143 <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m_d_addr_read_22_reg_143 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_23_reg_148_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_23_reg_148 <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m_d_addr_read_23_reg_148 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_24_reg_153_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_24_reg_153 <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m_d_addr_read_24_reg_153 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_25_reg_158_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_25_reg_158 <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m_d_addr_read_25_reg_158 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_26_reg_163_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_26_reg_163 <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage4 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m_d_addr_read_26_reg_163 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_27_reg_168_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_27_reg_168 <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage5 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m_d_addr_read_27_reg_168 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_28_reg_173_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_28_reg_173 <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage6 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    m_d_addr_read_28_reg_173 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_29_reg_178_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_29_reg_178 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage7 = ap_CS_fsm))) then 
                    m_d_addr_read_29_reg_178 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    m_d_addr_read_reg_108_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_d_addr_read_reg_108 <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage9 = ap_CS_fsm))) then 
                    m_d_addr_read_reg_108 <= m_axi_m_d_RDATA;
                end if; 
            end if;
        end if;
    end process;


    sum_reg_97_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                sum_reg_97 <= ap_const_lv32_0;
            else
                if (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    sum_reg_97 <= sum_fu_60_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage8_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_reset_idle_pp0, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage10_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage10_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage11_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage11_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage12_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage12_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage13_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage13_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage14_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage14_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage15_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage15_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage15_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage15_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage1_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage1_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage2_01001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID, ap_sig_ioackin_m_axi_m_d_ARREADY)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_sig_ioackin_m_axi_m_d_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID, ap_sig_ioackin_m_axi_m_d_ARREADY)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_sig_ioackin_m_axi_m_d_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage3_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage3_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage4_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage4_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage5_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage5_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage6_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage6_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage7_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage7_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage8_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage8_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage9_11001 <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_m_d_RVALID)
    begin
                ap_block_pp0_stage9_subdone <= ((m_axi_m_d_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage9_iter0_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state10_pp0_stage9_iter0 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state11_pp0_stage10_iter0_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state11_pp0_stage10_iter0 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state12_pp0_stage11_iter0_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state12_pp0_stage11_iter0 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state13_pp0_stage12_iter0_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state13_pp0_stage12_iter0 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state14_pp0_stage13_iter0_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state14_pp0_stage13_iter0 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state15_pp0_stage14_iter0_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state15_pp0_stage14_iter0 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state16_pp0_stage15_iter0_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state16_pp0_stage15_iter0 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state17_pp0_stage0_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state18_pp0_stage1_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state18_pp0_stage1_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state19_pp0_stage2_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state19_pp0_stage2_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state20_pp0_stage3_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state20_pp0_stage3_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state21_pp0_stage4_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state21_pp0_stage4_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state22_pp0_stage5_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state22_pp0_stage5_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state23_pp0_stage6_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state23_pp0_stage6_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state24_pp0_stage7_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state24_pp0_stage7_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;


    ap_block_state25_pp0_stage8_iter1_assign_proc : process(m_axi_m_d_RVALID)
    begin
                ap_block_state25_pp0_stage8_iter1 <= (m_axi_m_d_RVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage8 = ap_CS_fsm)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm, ap_idle_pp0)
    begin
        if (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_block_pp0_stage15_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage15 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (((((((((((((((m_axi_m_d_RDATA & m_d_addr_read_29_reg_178) & m_d_addr_read_28_reg_173) & m_d_addr_read_27_reg_168) & m_d_addr_read_26_reg_163) & m_d_addr_read_25_reg_158) & m_d_addr_read_24_reg_153) & m_d_addr_read_23_reg_148) & m_d_addr_read_22_reg_143) & m_d_addr_read_21_reg_138) & m_d_addr_read_20_reg_133) & m_d_addr_read_19_reg_128) & m_d_addr_read_18_reg_123) & m_d_addr_read_17_reg_118) & m_d_addr_read_16_reg_113) & m_d_addr_read_reg_108);

    ap_sig_ioackin_m_axi_m_d_ARREADY_assign_proc : process(m_axi_m_d_ARREADY, ap_reg_ioackin_m_axi_m_d_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_m_d_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_m_d_ARREADY <= m_axi_m_d_ARREADY;
        else 
            ap_sig_ioackin_m_axi_m_d_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_m_d_ARADDR <= sum_cast_fu_66_p1(32 - 1 downto 0);
    m_axi_m_d_ARBURST <= ap_const_lv2_0;
    m_axi_m_d_ARCACHE <= ap_const_lv4_0;
    m_axi_m_d_ARID <= ap_const_lv1_0;
    m_axi_m_d_ARLEN <= ap_const_lv32_10;
    m_axi_m_d_ARLOCK <= ap_const_lv2_0;
    m_axi_m_d_ARPROT <= ap_const_lv3_0;
    m_axi_m_d_ARQOS <= ap_const_lv4_0;
    m_axi_m_d_ARREGION <= ap_const_lv4_0;
    m_axi_m_d_ARSIZE <= ap_const_lv3_0;
    m_axi_m_d_ARUSER <= ap_const_lv1_0;

    m_axi_m_d_ARVALID_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_reg_ioackin_m_axi_m_d_ARREADY, ap_block_pp0_stage2_01001)
    begin
        if (((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_reg_ioackin_m_axi_m_d_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_axi_m_d_ARVALID <= ap_const_logic_1;
        else 
            m_axi_m_d_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_m_d_AWADDR <= ap_const_lv32_0;
    m_axi_m_d_AWBURST <= ap_const_lv2_0;
    m_axi_m_d_AWCACHE <= ap_const_lv4_0;
    m_axi_m_d_AWID <= ap_const_lv1_0;
    m_axi_m_d_AWLEN <= ap_const_lv32_0;
    m_axi_m_d_AWLOCK <= ap_const_lv2_0;
    m_axi_m_d_AWPROT <= ap_const_lv3_0;
    m_axi_m_d_AWQOS <= ap_const_lv4_0;
    m_axi_m_d_AWREGION <= ap_const_lv4_0;
    m_axi_m_d_AWSIZE <= ap_const_lv3_0;
    m_axi_m_d_AWUSER <= ap_const_lv1_0;
    m_axi_m_d_AWVALID <= ap_const_logic_0;
    m_axi_m_d_BREADY <= ap_const_logic_0;

    m_axi_m_d_RREADY_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage15_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage15 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage14 = ap_CS_fsm)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage13 = ap_CS_fsm)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage12 = ap_CS_fsm)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage11 = ap_CS_fsm)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage10 = ap_CS_fsm)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage9 = ap_CS_fsm)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage8 = ap_CS_fsm)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage7 = ap_CS_fsm)) or ((ap_ST_fsm_pp0_stage6 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_ST_fsm_pp0_stage5 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_ST_fsm_pp0_stage4 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            m_axi_m_d_RREADY <= ap_const_logic_1;
        else 
            m_axi_m_d_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_m_d_WDATA <= ap_const_lv32_0;
    m_axi_m_d_WID <= ap_const_lv1_0;
    m_axi_m_d_WLAST <= ap_const_logic_0;
    m_axi_m_d_WSTRB <= ap_const_lv4_0;
    m_axi_m_d_WUSER <= ap_const_lv1_0;
    m_axi_m_d_WVALID <= ap_const_logic_0;

    m_d_blk_n_AR_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, m_axi_m_d_ARREADY, ap_block_pp0_stage2)
    begin
        if (((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            m_d_blk_n_AR <= m_axi_m_d_ARREADY;
        else 
            m_d_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    m_d_blk_n_R_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_m_d_RVALID, ap_block_pp0_stage2, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12, ap_block_pp0_stage13, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage15 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage14 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage13 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage13)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage12 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage11 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage10 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage9 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage8 = ap_CS_fsm)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_ST_fsm_pp0_stage7 = ap_CS_fsm)) or ((ap_ST_fsm_pp0_stage6 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_ST_fsm_pp0_stage5 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_ST_fsm_pp0_stage4 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            m_d_blk_n_R <= m_axi_m_d_RVALID;
        else 
            m_d_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

        sum_cast_fu_66_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_reg_97),64));

    sum_fu_60_p2 <= std_logic_vector(unsigned(ap_port_reg_offset) + unsigned(ap_const_lv32_40000));
end behav;
