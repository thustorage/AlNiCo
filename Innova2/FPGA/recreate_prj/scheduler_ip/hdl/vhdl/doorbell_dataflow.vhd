-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doorbell_dataflow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_hostm_d_AWVALID : OUT STD_LOGIC;
    m_axi_hostm_d_AWREADY : IN STD_LOGIC;
    m_axi_hostm_d_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostm_d_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostm_d_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostm_d_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostm_d_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostm_d_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostm_d_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostm_d_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostm_d_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostm_d_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_WVALID : OUT STD_LOGIC;
    m_axi_hostm_d_WREADY : IN STD_LOGIC;
    m_axi_hostm_d_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostm_d_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostm_d_WLAST : OUT STD_LOGIC;
    m_axi_hostm_d_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_ARVALID : OUT STD_LOGIC;
    m_axi_hostm_d_ARREADY : IN STD_LOGIC;
    m_axi_hostm_d_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostm_d_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostm_d_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostm_d_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostm_d_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostm_d_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostm_d_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostm_d_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostm_d_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostm_d_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_RVALID : IN STD_LOGIC;
    m_axi_hostm_d_RREADY : OUT STD_LOGIC;
    m_axi_hostm_d_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostm_d_RLAST : IN STD_LOGIC;
    m_axi_hostm_d_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostm_d_BVALID : IN STD_LOGIC;
    m_axi_hostm_d_BREADY : OUT STD_LOGIC;
    m_axi_hostm_d_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostm_d_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostm_d_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    compute_core_id_out_s_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    compute_core_id_out_s_1_empty_n : IN STD_LOGIC;
    compute_core_id_out_s_1_read : OUT STD_LOGIC;
    compute_core_id_out_1_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    compute_core_id_out_1_0_empty_n : IN STD_LOGIC;
    compute_core_id_out_1_0_read : OUT STD_LOGIC;
    queue_metadata_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    queue_metadata_ce0 : OUT STD_LOGIC;
    queue_metadata_we0 : OUT STD_LOGIC;
    queue_metadata_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    queue_metadata_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    MESS_NUM : IN STD_LOGIC_VECTOR (31 downto 0);
    queue_addr_map_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    queue_addr_map_ce0 : OUT STD_LOGIC;
    queue_addr_map_q0 : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of doorbell_dataflow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "10";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_hostm_d_AWREADY : STD_LOGIC;
    signal tmp_reg_198 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal hostm_d_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal hostm_d_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal hostm_d_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_reg_198_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal compute_core_id_out_s_1_blk_n : STD_LOGIC;
    signal compute_core_id_out_1_0_blk_n : STD_LOGIC;
    signal tmp_nbreadreq_fu_64_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_hostm_d_WREADY : STD_LOGIC;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_198_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_i_reg_202 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal compute_core_id_out_s_10_status : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal queue_metadata_addr_reg_207 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal local_head_reg_217 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal queue_offset_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_offset_reg_223 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tmp_62_i_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_i_reg_228 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_105_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_62_fu_133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_i_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_hostm_d_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_hostm_d_WREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal compute_core_id_out_s_10_update : STD_LOGIC;
    signal tmp_60_i_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_62_fu_133_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_138_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_924_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_i_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_i_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_363 : BOOLEAN;
    signal ap_condition_368 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_hostm_d_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_hostm_d_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_363)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage3_11001)) then 
                        ap_reg_ioackin_m_axi_hostm_d_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (m_axi_hostm_d_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_hostm_d_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_hostm_d_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_hostm_d_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_368)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_hostm_d_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_hostm_d_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_hostm_d_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    local_head_reg_217_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                local_head_reg_217 <= ap_const_lv32_0;
            else
                if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    local_head_reg_217 <= queue_metadata_q0;
                end if; 
            end if;
        end if;
    end process;


    queue_metadata_addr_reg_207_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                queue_metadata_addr_reg_207(2) <= '0';
                queue_metadata_addr_reg_207(3) <= '0';
                queue_metadata_addr_reg_207(4) <= '0';
                queue_metadata_addr_reg_207(5) <= '0';
                queue_metadata_addr_reg_207(6) <= '0';
            else
                if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                                        queue_metadata_addr_reg_207(6 downto 2) <= tmp_105_fu_146_p1(7 - 1 downto 0)(6 downto 2);
                end if; 
            end if;
        end if;
    end process;


    queue_offset_reg_223_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                queue_offset_reg_223 <= ap_const_lv32_0;
            else
                if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                    queue_offset_reg_223 <= queue_offset_fu_161_p2;
                end if; 
            end if;
        end if;
    end process;


    tmp_62_i_reg_228_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_62_i_reg_228 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage3 = ap_CS_fsm))) then 
                    tmp_62_i_reg_228 <= tmp_62_i_fu_183_p2;
                end if; 
            end if;
        end if;
    end process;


    tmp_i_reg_202_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_i_reg_202 <= ap_const_lv32_0;
            else
                if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    tmp_i_reg_202 <= compute_core_id_out_s_1_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_reg_198_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_reg_198 <= ap_const_lv1_0;
            else
                if (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    tmp_reg_198 <= tmp_nbreadreq_fu_64_p4;
                end if; 
            end if;
        end if;
    end process;


    tmp_reg_198_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_reg_198_pp0_iter1_reg <= ap_const_lv1_0;
            else
                if (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    tmp_reg_198_pp0_iter1_reg <= tmp_reg_198;
                end if; 
            end if;
        end if;
    end process;


    tmp_reg_198_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_reg_198_pp0_iter2_reg <= ap_const_lv1_0;
            else
                if (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    tmp_reg_198_pp0_iter2_reg <= tmp_reg_198_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;

    queue_metadata_addr_reg_207(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_reset_idle_pp0, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_hostm_d_BVALID, tmp_reg_198, tmp_reg_198_pp0_iter2_reg, compute_core_id_out_s_10_status)
    begin
                ap_block_pp0_stage1_11001 <= (((tmp_reg_198 = ap_const_lv1_1) and (compute_core_id_out_s_10_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_reg_198_pp0_iter2_reg = ap_const_lv1_1) and (m_axi_hostm_d_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_hostm_d_BVALID, tmp_reg_198, tmp_reg_198_pp0_iter2_reg, compute_core_id_out_s_10_status)
    begin
                ap_block_pp0_stage1_subdone <= (((tmp_reg_198 = ap_const_lv1_1) and (compute_core_id_out_s_10_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_reg_198_pp0_iter2_reg = ap_const_lv1_1) and (m_axi_hostm_d_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage2_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage2_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;


    ap_block_state10_pp0_stage1_iter2_assign_proc : process(m_axi_hostm_d_BVALID, tmp_reg_198_pp0_iter2_reg)
    begin
                ap_block_state10_pp0_stage1_iter2 <= ((tmp_reg_198_pp0_iter2_reg = ap_const_lv1_1) and (m_axi_hostm_d_BVALID = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(tmp_reg_198, compute_core_id_out_s_10_status)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((tmp_reg_198 = ap_const_lv1_1) and (compute_core_id_out_s_10_status = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(ap_sig_ioackin_m_axi_hostm_d_AWREADY, tmp_reg_198)
    begin
                ap_block_state4_io <= ((tmp_reg_198 = ap_const_lv1_1) and (ap_sig_ioackin_m_axi_hostm_d_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(tmp_reg_198, ap_sig_ioackin_m_axi_hostm_d_WREADY)
    begin
                ap_block_state5_io <= ((tmp_reg_198 = ap_const_lv1_1) and (ap_sig_ioackin_m_axi_hostm_d_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_363_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, tmp_reg_198)
    begin
                ap_condition_363 <= ((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_368_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter1, tmp_reg_198)
    begin
                ap_condition_368 <= ((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm, ap_idle_pp0)
    begin
        if (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_hostm_d_AWREADY_assign_proc : process(m_axi_hostm_d_AWREADY, ap_reg_ioackin_m_axi_hostm_d_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_hostm_d_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_hostm_d_AWREADY <= m_axi_hostm_d_AWREADY;
        else 
            ap_sig_ioackin_m_axi_hostm_d_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_hostm_d_WREADY_assign_proc : process(m_axi_hostm_d_WREADY, ap_reg_ioackin_m_axi_hostm_d_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_hostm_d_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_hostm_d_WREADY <= m_axi_hostm_d_WREADY;
        else 
            ap_sig_ioackin_m_axi_hostm_d_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    compute_core_id_out_1_0_blk_n_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, tmp_reg_198, compute_core_id_out_1_0_empty_n, ap_block_pp0_stage1)
    begin
        if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            compute_core_id_out_1_0_blk_n <= compute_core_id_out_1_0_empty_n;
        else 
            compute_core_id_out_1_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    compute_core_id_out_1_0_read <= compute_core_id_out_s_10_update;
    compute_core_id_out_s_10_status <= (compute_core_id_out_s_1_empty_n and compute_core_id_out_1_0_empty_n);

    compute_core_id_out_s_10_update_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, tmp_reg_198, ap_block_pp0_stage1_11001)
    begin
        if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            compute_core_id_out_s_10_update <= ap_const_logic_1;
        else 
            compute_core_id_out_s_10_update <= ap_const_logic_0;
        end if; 
    end process;


    compute_core_id_out_s_1_blk_n_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, tmp_reg_198, compute_core_id_out_s_1_empty_n, ap_block_pp0_stage1)
    begin
        if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            compute_core_id_out_s_1_blk_n <= compute_core_id_out_s_1_empty_n;
        else 
            compute_core_id_out_s_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    compute_core_id_out_s_1_read <= compute_core_id_out_s_10_update;
        extLd_i_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(queue_addr_map_q0),32));


    hostm_d_blk_n_AW_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, m_axi_hostm_d_AWREADY, tmp_reg_198, ap_block_pp0_stage3)
    begin
        if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            hostm_d_blk_n_AW <= m_axi_hostm_d_AWREADY;
        else 
            hostm_d_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    hostm_d_blk_n_B_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter2, m_axi_hostm_d_BVALID, ap_block_pp0_stage1, tmp_reg_198_pp0_iter2_reg)
    begin
        if (((tmp_reg_198_pp0_iter2_reg = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            hostm_d_blk_n_B <= m_axi_hostm_d_BVALID;
        else 
            hostm_d_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    hostm_d_blk_n_W_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter1, m_axi_hostm_d_WREADY, tmp_reg_198, ap_block_pp0_stage0)
    begin
        if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hostm_d_blk_n_W <= m_axi_hostm_d_WREADY;
        else 
            hostm_d_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_hostm_d_ARADDR <= ap_const_lv32_0;
    m_axi_hostm_d_ARBURST <= ap_const_lv2_0;
    m_axi_hostm_d_ARCACHE <= ap_const_lv4_0;
    m_axi_hostm_d_ARID <= ap_const_lv1_0;
    m_axi_hostm_d_ARLEN <= ap_const_lv32_0;
    m_axi_hostm_d_ARLOCK <= ap_const_lv2_0;
    m_axi_hostm_d_ARPROT <= ap_const_lv3_0;
    m_axi_hostm_d_ARQOS <= ap_const_lv4_0;
    m_axi_hostm_d_ARREGION <= ap_const_lv4_0;
    m_axi_hostm_d_ARSIZE <= ap_const_lv3_0;
    m_axi_hostm_d_ARUSER <= ap_const_lv1_0;
    m_axi_hostm_d_ARVALID <= ap_const_logic_0;
    m_axi_hostm_d_AWADDR <= tmp_64_i_fu_188_p1(32 - 1 downto 0);
    m_axi_hostm_d_AWBURST <= ap_const_lv2_0;
    m_axi_hostm_d_AWCACHE <= ap_const_lv4_0;
    m_axi_hostm_d_AWID <= ap_const_lv1_0;
    m_axi_hostm_d_AWLEN <= ap_const_lv32_1;
    m_axi_hostm_d_AWLOCK <= ap_const_lv2_0;
    m_axi_hostm_d_AWPROT <= ap_const_lv3_0;
    m_axi_hostm_d_AWQOS <= ap_const_lv4_0;
    m_axi_hostm_d_AWREGION <= ap_const_lv4_0;
    m_axi_hostm_d_AWSIZE <= ap_const_lv3_0;
    m_axi_hostm_d_AWUSER <= ap_const_lv1_0;

    m_axi_hostm_d_AWVALID_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, tmp_reg_198, ap_reg_ioackin_m_axi_hostm_d_AWREADY, ap_block_pp0_stage3_01001)
    begin
        if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_reg_ioackin_m_axi_hostm_d_AWREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_axi_hostm_d_AWVALID <= ap_const_logic_1;
        else 
            m_axi_hostm_d_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_hostm_d_BREADY_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter2, tmp_reg_198_pp0_iter2_reg, ap_block_pp0_stage1_11001)
    begin
        if (((tmp_reg_198_pp0_iter2_reg = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_hostm_d_BREADY <= ap_const_logic_1;
        else 
            m_axi_hostm_d_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_hostm_d_RREADY <= ap_const_logic_0;
    m_axi_hostm_d_WDATA <= tmp_i_reg_202;
    m_axi_hostm_d_WID <= ap_const_lv1_0;
    m_axi_hostm_d_WLAST <= ap_const_logic_0;
    m_axi_hostm_d_WSTRB <= ap_const_lv4_F;
    m_axi_hostm_d_WUSER <= ap_const_lv1_0;

    m_axi_hostm_d_WVALID_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter1, tmp_reg_198, ap_reg_ioackin_m_axi_hostm_d_WREADY, ap_block_pp0_stage0_01001)
    begin
        if (((tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_reg_ioackin_m_axi_hostm_d_WREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            m_axi_hostm_d_WVALID <= ap_const_logic_1;
        else 
            m_axi_hostm_d_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    queue_addr_map_address0 <= tmp_i_62_fu_133_p1(5 - 1 downto 0);

    queue_addr_map_ce0_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            queue_addr_map_ce0 <= ap_const_logic_1;
        else 
            queue_addr_map_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_metadata_address0_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, queue_metadata_addr_reg_207, tmp_105_fu_146_p1)
    begin
        if ((((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            queue_metadata_address0 <= queue_metadata_addr_reg_207;
        elsif (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            queue_metadata_address0 <= tmp_105_fu_146_p1(7 - 1 downto 0);
        else 
            queue_metadata_address0 <= "XXXXXXX";
        end if; 
    end process;


    queue_metadata_ce0_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            queue_metadata_ce0 <= ap_const_logic_1;
        else 
            queue_metadata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_metadata_d0_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_block_pp0_stage0, tmp_60_i_fu_167_p2)
    begin
        if (((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            queue_metadata_d0 <= ap_const_lv32_0;
        elsif (((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            queue_metadata_d0 <= tmp_60_i_fu_167_p2;
        else 
            queue_metadata_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    queue_metadata_we0_assign_proc : process(ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, tmp_reg_198, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, tmp_62_i_reg_228)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_62_i_reg_228 = ap_const_lv1_1) and (tmp_reg_198 = ap_const_lv1_1) and (ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            queue_metadata_we0 <= ap_const_logic_1;
        else 
            queue_metadata_we0 <= ap_const_logic_0;
        end if; 
    end process;

    queue_offset_fu_161_p2 <= std_logic_vector(unsigned(tmp_924_fu_155_p2) + unsigned(extLd_i_fu_151_p1));
        tmp_105_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_138_p3),64));

    tmp_60_i_fu_167_p2 <= std_logic_vector(unsigned(local_head_reg_217) + unsigned(ap_const_lv32_1));
    tmp_61_i_fu_177_p2 <= std_logic_vector(unsigned(MESS_NUM) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_62_i_fu_183_p2 <= "1" when (local_head_reg_217 = tmp_61_i_fu_177_p2) else "0";
        tmp_64_i_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(queue_offset_reg_223),64));

    tmp_924_fu_155_p2 <= std_logic_vector(shift_left(unsigned(queue_metadata_q0),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_i_62_fu_133_p0 <= compute_core_id_out_1_0_dout;
        tmp_i_62_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_62_fu_133_p0),64));

    tmp_nbreadreq_fu_64_p4 <= (0=>(compute_core_id_out_s_1_empty_n and compute_core_id_out_1_0_empty_n), others=>'-');
    tmp_s_fu_138_p1 <= compute_core_id_out_1_0_dout;
    tmp_s_fu_138_p3 <= (tmp_s_fu_138_p1 & ap_const_lv2_0);
end behav;
