-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity check_message_datafl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_m_d_AWVALID : OUT STD_LOGIC;
    m_axi_m_d_AWREADY : IN STD_LOGIC;
    m_axi_m_d_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_d_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_d_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_WVALID : OUT STD_LOGIC;
    m_axi_m_d_WREADY : IN STD_LOGIC;
    m_axi_m_d_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_WLAST : OUT STD_LOGIC;
    m_axi_m_d_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_ARVALID : OUT STD_LOGIC;
    m_axi_m_d_ARREADY : IN STD_LOGIC;
    m_axi_m_d_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_d_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_m_d_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_m_d_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_RVALID : IN STD_LOGIC;
    m_axi_m_d_RREADY : OUT STD_LOGIC;
    m_axi_m_d_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_m_d_RLAST : IN STD_LOGIC;
    m_axi_m_d_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_BVALID : IN STD_LOGIC;
    m_axi_m_d_BREADY : OUT STD_LOGIC;
    m_axi_m_d_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_m_d_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_m_d_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    jj_i : IN STD_LOGIC_VECTOR (31 downto 0);
    jj_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    jj_o_ap_vld : OUT STD_LOGIC;
    slot_offset1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    slot_offset1_ce0 : OUT STD_LOGIC;
    slot_offset1_q0 : IN STD_LOGIC_VECTOR (30 downto 0);
    RRB1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    RRB1_ce0 : OUT STD_LOGIC;
    RRB1_we0 : OUT STD_LOGIC;
    RRB1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    RRB1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    slot_partition1 : IN STD_LOGIC_VECTOR (31 downto 0);
    check_msg_out1_V_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    check_msg_out1_V_i_full_n : IN STD_LOGIC;
    check_msg_out1_V_i_write : OUT STD_LOGIC;
    check_msg_out1_V_cor_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    check_msg_out1_V_cor_full_n : IN STD_LOGIC;
    check_msg_out1_V_cor_write : OUT STD_LOGIC;
    check_msg_out1_V_old_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    check_msg_out1_V_old_full_n : IN STD_LOGIC;
    check_msg_out1_V_old_write : OUT STD_LOGIC;
    check_msg_out1_V_new_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    check_msg_out1_V_new_full_n : IN STD_LOGIC;
    check_msg_out1_V_new_write : OUT STD_LOGIC );
end;


architecture behav of check_message_datafl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFF0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal features1_V_ce0 : STD_LOGIC;
    signal features1_V_we0 : STD_LOGIC;
    signal features1_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal m_d_blk_n_AR : STD_LOGIC;
    signal m_d_blk_n_R : STD_LOGIC;
    signal grp_load_feature_fu_135_m_d_blk_n_AR : STD_LOGIC;
    signal grp_load_feature_fu_135_m_d_blk_n_R : STD_LOGIC;
    signal check_msg_out1_V_i_blk_n : STD_LOGIC;
    signal tmp_69_i_reg_306 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal check_msg_out1_V_cor_blk_n : STD_LOGIC;
    signal check_msg_out1_V_old_blk_n : STD_LOGIC;
    signal check_msg_out1_V_new_blk_n : STD_LOGIC;
    signal j_reg_256 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state1 : BOOLEAN;
    signal tmp_i_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_263 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal now_slot_offset1_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal now_slot_offset1_reg_274 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_i_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_i_reg_279 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_ioackin_m_axi_m_d_ARREADY : STD_LOGIC;
    signal core_id_fu_171_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal core_id_reg_290 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal tmp_RRB_reg_295 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal RRB1_addr_reg_301 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal tmp_69_i_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal features1_V_addr_reg_316 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal grp_load_feature_fu_135_ap_return : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_msg_new_features_reg_326 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_state36 : BOOLEAN;
    signal grp_load_feature_fu_135_ap_start : STD_LOGIC;
    signal grp_load_feature_fu_135_ap_done : STD_LOGIC;
    signal grp_load_feature_fu_135_ap_idle : STD_LOGIC;
    signal grp_load_feature_fu_135_ap_ready : STD_LOGIC;
    signal grp_load_feature_fu_135_m_axi_m_d_AWVALID : STD_LOGIC;
    signal grp_load_feature_fu_135_m_axi_m_d_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_WVALID : STD_LOGIC;
    signal grp_load_feature_fu_135_m_axi_m_d_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_WLAST : STD_LOGIC;
    signal grp_load_feature_fu_135_m_axi_m_d_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARVALID : STD_LOGIC;
    signal grp_load_feature_fu_135_m_axi_m_d_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_135_m_axi_m_d_RREADY : STD_LOGIC;
    signal grp_load_feature_fu_135_m_axi_m_d_BREADY : STD_LOGIC;
    signal grp_load_feature_fu_135_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_135_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_cast_i_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_m_d_ARREADY : STD_LOGIC := '0';
    signal check_msg_out1_V_i1_update : STD_LOGIC;
    signal check_msg_out1_V_i1_status : STD_LOGIC;
    signal ap_block_state37 : BOOLEAN;
    signal storemerge_i_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_146_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd5_i_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_i_fu_185_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_i_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_i_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_i_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_i_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state14 : BOOLEAN;
    signal ap_block_state21 : BOOLEAN;
    signal ap_block_state22 : BOOLEAN;
    signal ap_block_state23 : BOOLEAN;
    signal ap_block_state24 : BOOLEAN;
    signal ap_block_state25 : BOOLEAN;
    signal ap_block_state26 : BOOLEAN;
    signal ap_block_state27 : BOOLEAN;
    signal ap_block_state28 : BOOLEAN;
    signal ap_block_state29 : BOOLEAN;
    signal ap_block_state30 : BOOLEAN;
    signal ap_block_state31 : BOOLEAN;
    signal ap_block_state32 : BOOLEAN;
    signal ap_block_state33 : BOOLEAN;
    signal ap_block_state34 : BOOLEAN;
    signal ap_block_state35 : BOOLEAN;

    component load_feature IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_m_d_AWVALID : OUT STD_LOGIC;
        m_axi_m_d_AWREADY : IN STD_LOGIC;
        m_axi_m_d_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_m_d_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_m_d_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_m_d_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_m_d_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_m_d_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_m_d_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_m_d_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_m_d_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_m_d_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_WVALID : OUT STD_LOGIC;
        m_axi_m_d_WREADY : IN STD_LOGIC;
        m_axi_m_d_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_m_d_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_m_d_WLAST : OUT STD_LOGIC;
        m_axi_m_d_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_ARVALID : OUT STD_LOGIC;
        m_axi_m_d_ARREADY : IN STD_LOGIC;
        m_axi_m_d_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_m_d_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_m_d_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_m_d_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_m_d_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_m_d_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_m_d_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_m_d_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_m_d_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_m_d_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_RVALID : IN STD_LOGIC;
        m_axi_m_d_RREADY : OUT STD_LOGIC;
        m_axi_m_d_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_m_d_RLAST : IN STD_LOGIC;
        m_axi_m_d_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_m_d_BVALID : IN STD_LOGIC;
        m_axi_m_d_BREADY : OUT STD_LOGIC;
        m_axi_m_d_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_m_d_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_m_d_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        offset : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_d_blk_n_AR : OUT STD_LOGIC;
        m_d_blk_n_R : OUT STD_LOGIC );
    end component;


    component check_message_datbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;



begin
    features1_V_U : component check_message_datbkb
    generic map (
        DataWidth => 512,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => features1_V_addr_reg_316,
        ce0 => features1_V_ce0,
        we0 => features1_V_we0,
        d0 => tmp_msg_new_features_reg_326,
        q0 => features1_V_q0);

    grp_load_feature_fu_135 : component load_feature
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_feature_fu_135_ap_start,
        ap_done => grp_load_feature_fu_135_ap_done,
        ap_idle => grp_load_feature_fu_135_ap_idle,
        ap_ready => grp_load_feature_fu_135_ap_ready,
        m_axi_m_d_AWVALID => grp_load_feature_fu_135_m_axi_m_d_AWVALID,
        m_axi_m_d_AWREADY => ap_const_logic_0,
        m_axi_m_d_AWADDR => grp_load_feature_fu_135_m_axi_m_d_AWADDR,
        m_axi_m_d_AWID => grp_load_feature_fu_135_m_axi_m_d_AWID,
        m_axi_m_d_AWLEN => grp_load_feature_fu_135_m_axi_m_d_AWLEN,
        m_axi_m_d_AWSIZE => grp_load_feature_fu_135_m_axi_m_d_AWSIZE,
        m_axi_m_d_AWBURST => grp_load_feature_fu_135_m_axi_m_d_AWBURST,
        m_axi_m_d_AWLOCK => grp_load_feature_fu_135_m_axi_m_d_AWLOCK,
        m_axi_m_d_AWCACHE => grp_load_feature_fu_135_m_axi_m_d_AWCACHE,
        m_axi_m_d_AWPROT => grp_load_feature_fu_135_m_axi_m_d_AWPROT,
        m_axi_m_d_AWQOS => grp_load_feature_fu_135_m_axi_m_d_AWQOS,
        m_axi_m_d_AWREGION => grp_load_feature_fu_135_m_axi_m_d_AWREGION,
        m_axi_m_d_AWUSER => grp_load_feature_fu_135_m_axi_m_d_AWUSER,
        m_axi_m_d_WVALID => grp_load_feature_fu_135_m_axi_m_d_WVALID,
        m_axi_m_d_WREADY => ap_const_logic_0,
        m_axi_m_d_WDATA => grp_load_feature_fu_135_m_axi_m_d_WDATA,
        m_axi_m_d_WSTRB => grp_load_feature_fu_135_m_axi_m_d_WSTRB,
        m_axi_m_d_WLAST => grp_load_feature_fu_135_m_axi_m_d_WLAST,
        m_axi_m_d_WID => grp_load_feature_fu_135_m_axi_m_d_WID,
        m_axi_m_d_WUSER => grp_load_feature_fu_135_m_axi_m_d_WUSER,
        m_axi_m_d_ARVALID => grp_load_feature_fu_135_m_axi_m_d_ARVALID,
        m_axi_m_d_ARREADY => m_axi_m_d_ARREADY,
        m_axi_m_d_ARADDR => grp_load_feature_fu_135_m_axi_m_d_ARADDR,
        m_axi_m_d_ARID => grp_load_feature_fu_135_m_axi_m_d_ARID,
        m_axi_m_d_ARLEN => grp_load_feature_fu_135_m_axi_m_d_ARLEN,
        m_axi_m_d_ARSIZE => grp_load_feature_fu_135_m_axi_m_d_ARSIZE,
        m_axi_m_d_ARBURST => grp_load_feature_fu_135_m_axi_m_d_ARBURST,
        m_axi_m_d_ARLOCK => grp_load_feature_fu_135_m_axi_m_d_ARLOCK,
        m_axi_m_d_ARCACHE => grp_load_feature_fu_135_m_axi_m_d_ARCACHE,
        m_axi_m_d_ARPROT => grp_load_feature_fu_135_m_axi_m_d_ARPROT,
        m_axi_m_d_ARQOS => grp_load_feature_fu_135_m_axi_m_d_ARQOS,
        m_axi_m_d_ARREGION => grp_load_feature_fu_135_m_axi_m_d_ARREGION,
        m_axi_m_d_ARUSER => grp_load_feature_fu_135_m_axi_m_d_ARUSER,
        m_axi_m_d_RVALID => m_axi_m_d_RVALID,
        m_axi_m_d_RREADY => grp_load_feature_fu_135_m_axi_m_d_RREADY,
        m_axi_m_d_RDATA => m_axi_m_d_RDATA,
        m_axi_m_d_RLAST => m_axi_m_d_RLAST,
        m_axi_m_d_RID => m_axi_m_d_RID,
        m_axi_m_d_RUSER => m_axi_m_d_RUSER,
        m_axi_m_d_RRESP => m_axi_m_d_RRESP,
        m_axi_m_d_BVALID => ap_const_logic_0,
        m_axi_m_d_BREADY => grp_load_feature_fu_135_m_axi_m_d_BREADY,
        m_axi_m_d_BRESP => ap_const_lv2_0,
        m_axi_m_d_BID => ap_const_lv1_0,
        m_axi_m_d_BUSER => ap_const_lv1_0,
        offset => grp_load_feature_fu_135_offset,
        ap_return => grp_load_feature_fu_135_ap_return,
        m_d_blk_n_AR => grp_load_feature_fu_135_m_d_blk_n_AR,
        m_d_blk_n_R => grp_load_feature_fu_135_m_d_blk_n_R);





    RRB1_addr_reg_301_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                RRB1_addr_reg_301 <= ap_const_lv7_0;
            else
                if (((m_axi_m_d_RVALID = ap_const_logic_1) and (ap_ST_fsm_state10 = ap_CS_fsm))) then 
                    RRB1_addr_reg_301 <= tmp_i_reg_263(7 - 1 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_m_d_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_m_d_ARREADY <= ap_const_logic_0;
            else
                if ((ap_ST_fsm_state3 = ap_CS_fsm)) then
                    if ((ap_sig_ioackin_m_axi_m_d_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_m_d_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_m_d_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_m_d_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    core_id_reg_290_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                core_id_reg_290 <= ap_const_lv16_0;
            else
                if (((m_axi_m_d_RVALID = ap_const_logic_1) and (ap_ST_fsm_state10 = ap_CS_fsm))) then 
                    core_id_reg_290 <= core_id_fu_171_p1;
                end if; 
            end if;
        end if;
    end process;


    features1_V_addr_reg_316_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                features1_V_addr_reg_316 <= ap_const_lv7_0;
            else
                if (((tmp_69_i_fu_202_p2 = ap_const_lv1_1) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                    features1_V_addr_reg_316 <= tmp_i_reg_263(7 - 1 downto 0);
                end if; 
            end if;
        end if;
    end process;


    grp_load_feature_fu_135_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_feature_fu_135_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_fsm_state12 = ap_NS_fsm) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
                    grp_load_feature_fu_135_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_feature_fu_135_ap_ready = ap_const_logic_1)) then 
                    grp_load_feature_fu_135_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_256_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                j_reg_256 <= ap_const_lv32_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_ST_fsm_state1 = ap_CS_fsm))) then 
                    j_reg_256 <= jj_i;
                end if; 
            end if;
        end if;
    end process;


    now_slot_offset1_reg_274_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                now_slot_offset1_reg_274 <= ap_const_lv32_0;
            else
                if ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
                    now_slot_offset1_reg_274 <= now_slot_offset1_fu_151_p1;
                end if; 
            end if;
        end if;
    end process;


    sum_i_reg_279_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                sum_i_reg_279 <= ap_const_lv32_0;
            else
                if ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
                    sum_i_reg_279 <= sum_i_fu_155_p2;
                end if; 
            end if;
        end if;
    end process;


    tmp_69_i_reg_306_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_69_i_reg_306 <= ap_const_lv1_0;
            else
                if ((ap_ST_fsm_state11 = ap_CS_fsm)) then 
                    tmp_69_i_reg_306 <= tmp_69_i_fu_202_p2;
                end if; 
            end if;
        end if;
    end process;


    tmp_RRB_reg_295_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_RRB_reg_295 <= ap_const_lv16_0;
            else
                if (((m_axi_m_d_RVALID = ap_const_logic_1) and (ap_ST_fsm_state10 = ap_CS_fsm))) then 
                    tmp_RRB_reg_295 <= m_axi_m_d_RDATA(31 downto 16);
                end if; 
            end if;
        end if;
    end process;


    tmp_i_reg_263_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_i_reg_263 <= ap_const_lv64_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_ST_fsm_state1 = ap_CS_fsm))) then 
                    tmp_i_reg_263 <= tmp_i_fu_146_p1;
                end if; 
            end if;
        end if;
    end process;


    tmp_msg_new_features_reg_326_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_msg_new_features_reg_326 <= ap_const_lv512_lc_1;
            else
                if (((ap_ST_fsm_state36 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then 
                    tmp_msg_new_features_reg_326 <= grp_load_feature_fu_135_ap_return;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, m_axi_m_d_RVALID, grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R, tmp_69_i_reg_306, ap_sig_ioackin_m_axi_m_d_ARREADY, tmp_69_i_fu_202_p2, check_msg_out1_V_i1_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_ST_fsm_state1 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_ST_fsm_state3 = ap_CS_fsm) and (ap_sig_ioackin_m_axi_m_d_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_m_d_RVALID = ap_const_logic_1) and (ap_ST_fsm_state10 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_ST_fsm_state11 = ap_CS_fsm) and (tmp_69_i_fu_202_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if ((((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1) and (ap_ST_fsm_state14 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if ((((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1) and (ap_ST_fsm_state21 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_ST_fsm_state22 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_ST_fsm_state23 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_ST_fsm_state24 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_ST_fsm_state25 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_ST_fsm_state26 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_ST_fsm_state27 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_ST_fsm_state28 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_ST_fsm_state29 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_ST_fsm_state30 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_ST_fsm_state31 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_ST_fsm_state32 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_ST_fsm_state33 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_ST_fsm_state34 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_ST_fsm_state35 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_ST_fsm_state36 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if ((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    RRB1_address0_assign_proc : process(ap_CS_fsm, tmp_i_reg_263, RRB1_addr_reg_301)
    begin
        if ((ap_ST_fsm_state11 = ap_CS_fsm)) then 
            RRB1_address0 <= RRB1_addr_reg_301;
        elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
            RRB1_address0 <= tmp_i_reg_263(7 - 1 downto 0);
        else 
            RRB1_address0 <= "XXXXXXX";
        end if; 
    end process;


    RRB1_ce0_assign_proc : process(ap_CS_fsm, m_axi_m_d_RVALID)
    begin
        if (((ap_ST_fsm_state11 = ap_CS_fsm) or ((m_axi_m_d_RVALID = ap_const_logic_1) and (ap_ST_fsm_state10 = ap_CS_fsm)))) then 
            RRB1_ce0 <= ap_const_logic_1;
        else 
            RRB1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    RRB1_d0 <= tmp_RRB_reg_295;

    RRB1_we0_assign_proc : process(ap_CS_fsm, tmp_69_i_fu_202_p2)
    begin
        if (((tmp_69_i_fu_202_p2 = ap_const_lv1_1) and (ap_ST_fsm_state11 = ap_CS_fsm))) then 
            RRB1_we0 <= ap_const_logic_1;
        else 
            RRB1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state14 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state21_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state21 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state22_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state22 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state23_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state23 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state24_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state24 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state25_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state25 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state26_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state26 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state27_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state27 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state28_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state28 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state29_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state29 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state30_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state30 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state31_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state31 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state32_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state32 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state33_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state33 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state34_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state34 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state35_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state35 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state36_assign_proc : process(grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
                ap_block_state36 <= ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_0);
    end process;


    ap_block_state37_assign_proc : process(tmp_69_i_reg_306, check_msg_out1_V_i1_status)
    begin
                ap_block_state37 <= ((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, tmp_69_i_reg_306, check_msg_out1_V_i1_status)
    begin
        if ((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_fsm_state1 = ap_CS_fsm) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm, tmp_69_i_reg_306, check_msg_out1_V_i1_status)
    begin
        if ((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_m_d_ARREADY_assign_proc : process(m_axi_m_d_ARREADY, ap_reg_ioackin_m_axi_m_d_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_m_d_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_m_d_ARREADY <= m_axi_m_d_ARREADY;
        else 
            ap_sig_ioackin_m_axi_m_d_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    check_msg_out1_V_cor_blk_n_assign_proc : process(ap_CS_fsm, check_msg_out1_V_cor_full_n, tmp_69_i_reg_306)
    begin
        if (((ap_ST_fsm_state37 = ap_CS_fsm) and (tmp_69_i_reg_306 = ap_const_lv1_1))) then 
            check_msg_out1_V_cor_blk_n <= check_msg_out1_V_cor_full_n;
        else 
            check_msg_out1_V_cor_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    check_msg_out1_V_cor_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(core_id_reg_290),32));
    check_msg_out1_V_cor_write <= check_msg_out1_V_i1_update;
    check_msg_out1_V_i1_status <= (check_msg_out1_V_old_full_n and check_msg_out1_V_new_full_n and check_msg_out1_V_i_full_n and check_msg_out1_V_cor_full_n);

    check_msg_out1_V_i1_update_assign_proc : process(ap_CS_fsm, tmp_69_i_reg_306, check_msg_out1_V_i1_status)
    begin
        if ((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm) and (tmp_69_i_reg_306 = ap_const_lv1_1))) then 
            check_msg_out1_V_i1_update <= ap_const_logic_1;
        else 
            check_msg_out1_V_i1_update <= ap_const_logic_0;
        end if; 
    end process;


    check_msg_out1_V_i_blk_n_assign_proc : process(ap_CS_fsm, check_msg_out1_V_i_full_n, tmp_69_i_reg_306)
    begin
        if (((ap_ST_fsm_state37 = ap_CS_fsm) and (tmp_69_i_reg_306 = ap_const_lv1_1))) then 
            check_msg_out1_V_i_blk_n <= check_msg_out1_V_i_full_n;
        else 
            check_msg_out1_V_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    check_msg_out1_V_i_din <= std_logic_vector(signed(j_reg_256) + signed(slot_partition1));
    check_msg_out1_V_i_write <= check_msg_out1_V_i1_update;

    check_msg_out1_V_new_blk_n_assign_proc : process(ap_CS_fsm, check_msg_out1_V_new_full_n, tmp_69_i_reg_306)
    begin
        if (((ap_ST_fsm_state37 = ap_CS_fsm) and (tmp_69_i_reg_306 = ap_const_lv1_1))) then 
            check_msg_out1_V_new_blk_n <= check_msg_out1_V_new_full_n;
        else 
            check_msg_out1_V_new_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    check_msg_out1_V_new_din <= tmp_msg_new_features_reg_326;
    check_msg_out1_V_new_write <= check_msg_out1_V_i1_update;

    check_msg_out1_V_old_blk_n_assign_proc : process(ap_CS_fsm, check_msg_out1_V_old_full_n, tmp_69_i_reg_306)
    begin
        if (((ap_ST_fsm_state37 = ap_CS_fsm) and (tmp_69_i_reg_306 = ap_const_lv1_1))) then 
            check_msg_out1_V_old_blk_n <= check_msg_out1_V_old_full_n;
        else 
            check_msg_out1_V_old_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    check_msg_out1_V_old_din <= features1_V_q0;
    check_msg_out1_V_old_write <= check_msg_out1_V_i1_update;
    core_id_fu_171_p1 <= m_axi_m_d_RDATA(16 - 1 downto 0);
    extLd5_i_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(RRB1_q0),32));

    features1_V_ce0_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_d_blk_n_AR, grp_load_feature_fu_135_m_d_blk_n_R, tmp_69_i_reg_306, check_msg_out1_V_i1_status)
    begin
        if (((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm)) or ((ap_ST_fsm_state36 = ap_CS_fsm) and ((grp_load_feature_fu_135_m_d_blk_n_R and grp_load_feature_fu_135_m_d_blk_n_AR) = ap_const_logic_1)))) then 
            features1_V_ce0 <= ap_const_logic_1;
        else 
            features1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    features1_V_we0_assign_proc : process(ap_CS_fsm, tmp_69_i_reg_306, check_msg_out1_V_i1_status)
    begin
        if ((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm) and (tmp_69_i_reg_306 = ap_const_lv1_1))) then 
            features1_V_we0 <= ap_const_logic_1;
        else 
            features1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_load_feature_fu_135_ap_start <= grp_load_feature_fu_135_ap_start_reg;
    grp_load_feature_fu_135_offset <= std_logic_vector(signed(now_slot_offset1_reg_274) + signed(ap_const_lv32_FFFFFFF0));

    jj_o_assign_proc : process(ap_CS_fsm, jj_i, tmp_69_i_reg_306, check_msg_out1_V_i1_status, storemerge_i_fu_242_p3)
    begin
        if ((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm))) then 
            jj_o <= storemerge_i_fu_242_p3;
        else 
            jj_o <= jj_i;
        end if; 
    end process;


    jj_o_ap_vld_assign_proc : process(ap_CS_fsm, tmp_69_i_reg_306, check_msg_out1_V_i1_status)
    begin
        if ((not(((check_msg_out1_V_i1_status = ap_const_logic_0) and (tmp_69_i_reg_306 = ap_const_lv1_1))) and (ap_ST_fsm_state37 = ap_CS_fsm))) then 
            jj_o_ap_vld <= ap_const_logic_1;
        else 
            jj_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_m_d_ARADDR_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARADDR, sum_cast_i_fu_161_p1, ap_reg_ioackin_m_axi_m_d_ARREADY)
    begin
        if (((ap_ST_fsm_state3 = ap_CS_fsm) and (ap_reg_ioackin_m_axi_m_d_ARREADY = ap_const_logic_0))) then 
            m_axi_m_d_ARADDR <= sum_cast_i_fu_161_p1(32 - 1 downto 0);
        elsif (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARADDR <= grp_load_feature_fu_135_m_axi_m_d_ARADDR;
        else 
            m_axi_m_d_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_m_d_ARBURST_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARBURST)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARBURST <= grp_load_feature_fu_135_m_axi_m_d_ARBURST;
        else 
            m_axi_m_d_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_m_d_ARCACHE_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARCACHE)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARCACHE <= grp_load_feature_fu_135_m_axi_m_d_ARCACHE;
        else 
            m_axi_m_d_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_m_d_ARID_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARID)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARID <= grp_load_feature_fu_135_m_axi_m_d_ARID;
        else 
            m_axi_m_d_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_m_d_ARLEN_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARLEN, ap_reg_ioackin_m_axi_m_d_ARREADY)
    begin
        if (((ap_ST_fsm_state3 = ap_CS_fsm) and (ap_reg_ioackin_m_axi_m_d_ARREADY = ap_const_logic_0))) then 
            m_axi_m_d_ARLEN <= ap_const_lv32_1;
        elsif (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARLEN <= grp_load_feature_fu_135_m_axi_m_d_ARLEN;
        else 
            m_axi_m_d_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_m_d_ARLOCK_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARLOCK)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARLOCK <= grp_load_feature_fu_135_m_axi_m_d_ARLOCK;
        else 
            m_axi_m_d_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_m_d_ARPROT_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARPROT)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARPROT <= grp_load_feature_fu_135_m_axi_m_d_ARPROT;
        else 
            m_axi_m_d_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_m_d_ARQOS_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARQOS)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARQOS <= grp_load_feature_fu_135_m_axi_m_d_ARQOS;
        else 
            m_axi_m_d_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_m_d_ARREGION_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARREGION)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARREGION <= grp_load_feature_fu_135_m_axi_m_d_ARREGION;
        else 
            m_axi_m_d_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_m_d_ARSIZE_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARSIZE)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARSIZE <= grp_load_feature_fu_135_m_axi_m_d_ARSIZE;
        else 
            m_axi_m_d_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_m_d_ARUSER_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARUSER)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARUSER <= grp_load_feature_fu_135_m_axi_m_d_ARUSER;
        else 
            m_axi_m_d_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_m_d_ARVALID_assign_proc : process(ap_CS_fsm, grp_load_feature_fu_135_m_axi_m_d_ARVALID, ap_reg_ioackin_m_axi_m_d_ARREADY)
    begin
        if (((ap_ST_fsm_state3 = ap_CS_fsm) and (ap_reg_ioackin_m_axi_m_d_ARREADY = ap_const_logic_0))) then 
            m_axi_m_d_ARVALID <= ap_const_logic_1;
        elsif (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_ARVALID <= grp_load_feature_fu_135_m_axi_m_d_ARVALID;
        else 
            m_axi_m_d_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_m_d_AWADDR <= ap_const_lv32_0;
    m_axi_m_d_AWBURST <= ap_const_lv2_0;
    m_axi_m_d_AWCACHE <= ap_const_lv4_0;
    m_axi_m_d_AWID <= ap_const_lv1_0;
    m_axi_m_d_AWLEN <= ap_const_lv32_0;
    m_axi_m_d_AWLOCK <= ap_const_lv2_0;
    m_axi_m_d_AWPROT <= ap_const_lv3_0;
    m_axi_m_d_AWQOS <= ap_const_lv4_0;
    m_axi_m_d_AWREGION <= ap_const_lv4_0;
    m_axi_m_d_AWSIZE <= ap_const_lv3_0;
    m_axi_m_d_AWUSER <= ap_const_lv1_0;
    m_axi_m_d_AWVALID <= ap_const_logic_0;
    m_axi_m_d_BREADY <= ap_const_logic_0;

    m_axi_m_d_RREADY_assign_proc : process(ap_CS_fsm, m_axi_m_d_RVALID, grp_load_feature_fu_135_m_axi_m_d_RREADY)
    begin
        if (((m_axi_m_d_RVALID = ap_const_logic_1) and (ap_ST_fsm_state10 = ap_CS_fsm))) then 
            m_axi_m_d_RREADY <= ap_const_logic_1;
        elsif (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state20 = ap_CS_fsm) or (ap_ST_fsm_state19 = ap_CS_fsm) or (ap_ST_fsm_state18 = ap_CS_fsm) or (ap_ST_fsm_state17 = ap_CS_fsm) or (ap_ST_fsm_state16 = ap_CS_fsm) or (ap_ST_fsm_state15 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm) or (ap_ST_fsm_state13 = ap_CS_fsm) or (ap_ST_fsm_state12 = ap_CS_fsm))) then 
            m_axi_m_d_RREADY <= grp_load_feature_fu_135_m_axi_m_d_RREADY;
        else 
            m_axi_m_d_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_m_d_WDATA <= ap_const_lv32_0;
    m_axi_m_d_WID <= ap_const_lv1_0;
    m_axi_m_d_WLAST <= ap_const_logic_0;
    m_axi_m_d_WSTRB <= ap_const_lv4_0;
    m_axi_m_d_WUSER <= ap_const_lv1_0;
    m_axi_m_d_WVALID <= ap_const_logic_0;

    m_d_blk_n_AR_assign_proc : process(ap_CS_fsm, m_axi_m_d_ARREADY, grp_load_feature_fu_135_m_d_blk_n_AR)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm))) then 
            m_d_blk_n_AR <= grp_load_feature_fu_135_m_d_blk_n_AR;
        elsif ((ap_ST_fsm_state3 = ap_CS_fsm)) then 
            m_d_blk_n_AR <= m_axi_m_d_ARREADY;
        else 
            m_d_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    m_d_blk_n_R_assign_proc : process(ap_CS_fsm, m_axi_m_d_RVALID, grp_load_feature_fu_135_m_d_blk_n_R)
    begin
        if (((ap_ST_fsm_state36 = ap_CS_fsm) or (ap_ST_fsm_state35 = ap_CS_fsm) or (ap_ST_fsm_state34 = ap_CS_fsm) or (ap_ST_fsm_state33 = ap_CS_fsm) or (ap_ST_fsm_state32 = ap_CS_fsm) or (ap_ST_fsm_state31 = ap_CS_fsm) or (ap_ST_fsm_state30 = ap_CS_fsm) or (ap_ST_fsm_state29 = ap_CS_fsm) or (ap_ST_fsm_state28 = ap_CS_fsm) or (ap_ST_fsm_state27 = ap_CS_fsm) or (ap_ST_fsm_state26 = ap_CS_fsm) or (ap_ST_fsm_state25 = ap_CS_fsm) or (ap_ST_fsm_state24 = ap_CS_fsm) or (ap_ST_fsm_state23 = ap_CS_fsm) or (ap_ST_fsm_state22 = ap_CS_fsm) or (ap_ST_fsm_state21 = ap_CS_fsm) or (ap_ST_fsm_state14 = ap_CS_fsm))) then 
            m_d_blk_n_R <= grp_load_feature_fu_135_m_d_blk_n_R;
        elsif ((ap_ST_fsm_state10 = ap_CS_fsm)) then 
            m_d_blk_n_R <= m_axi_m_d_RVALID;
        else 
            m_d_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

        now_slot_offset1_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(slot_offset1_q0),32));

    slot_offset1_address0 <= tmp_i_fu_146_p1(7 - 1 downto 0);

    slot_offset1_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_ST_fsm_state1 = ap_CS_fsm))) then 
            slot_offset1_ce0 <= ap_const_logic_1;
        else 
            slot_offset1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_i_fu_242_p3 <= 
        ap_const_lv32_0 when (tmp_72_i_fu_232_p2(0) = '1') else 
        tmp_73_i_fu_237_p2;
        sum_cast_i_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_reg_279),64));

    sum_i_fu_155_p2 <= std_logic_vector(unsigned(ap_const_lv32_40000) + unsigned(now_slot_offset1_fu_151_p1));
    tmp_66_i_fu_185_p3 <= (ap_const_lv16_FFFF & tmp_RRB_reg_295);
    tmp_68_i_fu_196_p2 <= (extLd5_i_fu_192_p1 xor ap_const_lv32_FFFFFFFF);
    tmp_69_i_fu_202_p2 <= "1" when (tmp_66_i_fu_185_p3 = tmp_68_i_fu_196_p2) else "0";
    tmp_71_i_fu_227_p2 <= std_logic_vector(unsigned(slot_partition1) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_72_i_fu_232_p2 <= "1" when (j_reg_256 = tmp_71_i_fu_227_p2) else "0";
    tmp_73_i_fu_237_p2 <= std_logic_vector(signed(j_reg_256) + signed(ap_const_lv32_1));
    tmp_i_fu_146_p0 <= jj_i;
        tmp_i_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_fu_146_p0),64));

end behav;
