// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XSCHEDULE_NODMA_H
#define XSCHEDULE_NODMA_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xschedule_nodma_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XSchedule_nodma_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XSchedule_nodma;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XSchedule_nodma_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XSchedule_nodma_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XSchedule_nodma_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XSchedule_nodma_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XSchedule_nodma_Initialize(XSchedule_nodma *InstancePtr, u16 DeviceId);
XSchedule_nodma_Config* XSchedule_nodma_LookupConfig(u16 DeviceId);
int XSchedule_nodma_CfgInitialize(XSchedule_nodma *InstancePtr, XSchedule_nodma_Config *ConfigPtr);
#else
int XSchedule_nodma_Initialize(XSchedule_nodma *InstancePtr, const char* InstanceName);
int XSchedule_nodma_Release(XSchedule_nodma *InstancePtr);
#endif

void XSchedule_nodma_Start(XSchedule_nodma *InstancePtr);
u32 XSchedule_nodma_IsDone(XSchedule_nodma *InstancePtr);
u32 XSchedule_nodma_IsIdle(XSchedule_nodma *InstancePtr);
u32 XSchedule_nodma_IsReady(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_EnableAutoRestart(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_DisableAutoRestart(XSchedule_nodma *InstancePtr);

void XSchedule_nodma_Set_con(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_con(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_BASE_ADDR_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_BASE_ADDR_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_CLIENT_NUM_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_CLIENT_NUM_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_SLOT_NUM_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_SLOT_NUM_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_CORE_NUM_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_CORE_NUM_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_MESS_NUM_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_MESS_NUM_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_b_client_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_b_client_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_e_client_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_e_client_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_b_core_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_b_core_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_e_core_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_e_core_s(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_Set_ip_id_s(XSchedule_nodma *InstancePtr, u32 Data);
u32 XSchedule_nodma_Get_ip_id_s(XSchedule_nodma *InstancePtr);

void XSchedule_nodma_InterruptGlobalEnable(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_InterruptGlobalDisable(XSchedule_nodma *InstancePtr);
void XSchedule_nodma_InterruptEnable(XSchedule_nodma *InstancePtr, u32 Mask);
void XSchedule_nodma_InterruptDisable(XSchedule_nodma *InstancePtr, u32 Mask);
void XSchedule_nodma_InterruptClear(XSchedule_nodma *InstancePtr, u32 Mask);
u32 XSchedule_nodma_InterruptGetEnabled(XSchedule_nodma *InstancePtr);
u32 XSchedule_nodma_InterruptGetStatus(XSchedule_nodma *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
