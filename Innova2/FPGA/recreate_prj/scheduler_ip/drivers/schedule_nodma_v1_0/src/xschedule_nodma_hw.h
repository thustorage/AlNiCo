// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

// AXILiteS
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of con
//        bit 31~0 - con[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of BASE_ADDR_s
//        bit 31~0 - BASE_ADDR_s[31:0] (Read/Write)
// 0x1c : reserved
// 0x20 : Data signal of CLIENT_NUM_s
//        bit 31~0 - CLIENT_NUM_s[31:0] (Read/Write)
// 0x24 : reserved
// 0x28 : Data signal of SLOT_NUM_s
//        bit 31~0 - SLOT_NUM_s[31:0] (Read/Write)
// 0x2c : reserved
// 0x30 : Data signal of CORE_NUM_s
//        bit 31~0 - CORE_NUM_s[31:0] (Read/Write)
// 0x34 : reserved
// 0x38 : Data signal of MESS_NUM_s
//        bit 31~0 - MESS_NUM_s[31:0] (Read/Write)
// 0x3c : reserved
// 0x40 : Data signal of b_client_s
//        bit 31~0 - b_client_s[31:0] (Read/Write)
// 0x44 : reserved
// 0x48 : Data signal of e_client_s
//        bit 31~0 - e_client_s[31:0] (Read/Write)
// 0x4c : reserved
// 0x50 : Data signal of b_core_s
//        bit 31~0 - b_core_s[31:0] (Read/Write)
// 0x54 : reserved
// 0x58 : Data signal of e_core_s
//        bit 31~0 - e_core_s[31:0] (Read/Write)
// 0x5c : reserved
// 0x60 : Data signal of ip_id_s
//        bit 31~0 - ip_id_s[31:0] (Read/Write)
// 0x64 : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

#define XSCHEDULE_NODMA_AXILITES_ADDR_AP_CTRL           0x00
#define XSCHEDULE_NODMA_AXILITES_ADDR_GIE               0x04
#define XSCHEDULE_NODMA_AXILITES_ADDR_IER               0x08
#define XSCHEDULE_NODMA_AXILITES_ADDR_ISR               0x0c
#define XSCHEDULE_NODMA_AXILITES_ADDR_CON_DATA          0x10
#define XSCHEDULE_NODMA_AXILITES_BITS_CON_DATA          32
#define XSCHEDULE_NODMA_AXILITES_ADDR_BASE_ADDR_S_DATA  0x18
#define XSCHEDULE_NODMA_AXILITES_BITS_BASE_ADDR_S_DATA  32
#define XSCHEDULE_NODMA_AXILITES_ADDR_CLIENT_NUM_S_DATA 0x20
#define XSCHEDULE_NODMA_AXILITES_BITS_CLIENT_NUM_S_DATA 32
#define XSCHEDULE_NODMA_AXILITES_ADDR_SLOT_NUM_S_DATA   0x28
#define XSCHEDULE_NODMA_AXILITES_BITS_SLOT_NUM_S_DATA   32
#define XSCHEDULE_NODMA_AXILITES_ADDR_CORE_NUM_S_DATA   0x30
#define XSCHEDULE_NODMA_AXILITES_BITS_CORE_NUM_S_DATA   32
#define XSCHEDULE_NODMA_AXILITES_ADDR_MESS_NUM_S_DATA   0x38
#define XSCHEDULE_NODMA_AXILITES_BITS_MESS_NUM_S_DATA   32
#define XSCHEDULE_NODMA_AXILITES_ADDR_B_CLIENT_S_DATA   0x40
#define XSCHEDULE_NODMA_AXILITES_BITS_B_CLIENT_S_DATA   32
#define XSCHEDULE_NODMA_AXILITES_ADDR_E_CLIENT_S_DATA   0x48
#define XSCHEDULE_NODMA_AXILITES_BITS_E_CLIENT_S_DATA   32
#define XSCHEDULE_NODMA_AXILITES_ADDR_B_CORE_S_DATA     0x50
#define XSCHEDULE_NODMA_AXILITES_BITS_B_CORE_S_DATA     32
#define XSCHEDULE_NODMA_AXILITES_ADDR_E_CORE_S_DATA     0x58
#define XSCHEDULE_NODMA_AXILITES_BITS_E_CORE_S_DATA     32
#define XSCHEDULE_NODMA_AXILITES_ADDR_IP_ID_S_DATA      0x60
#define XSCHEDULE_NODMA_AXILITES_BITS_IP_ID_S_DATA      32

